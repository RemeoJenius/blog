{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/jenius.jpeg","path":"images/jenius.jpeg","modified":1,"renderable":0},{"_id":"source/images/shouji.png","path":"images/shouji.png","modified":1,"renderable":0},{"_id":"source/images/x.jpg","path":"images/x.jpg","modified":1,"renderable":0},{"_id":"source/images/v.jpg","path":"images/v.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/waterfall.png","path":"images/waterfall.png","modified":1,"renderable":0},{"_id":"source/images/xieafterupdate.png","path":"images/xieafterupdate.png","modified":1,"renderable":0},{"_id":"source/images/guanliao.png","path":"images/guanliao.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/soft classify.png","path":"images/soft classify.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/hacker.jpg","path":"images/hacker.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1490075734000},{"_id":"source/.DS_Store","hash":"8851c95ff24591c169a31e2d11ece64381d23855","modified":1491808749000},{"_id":"source/CNAME","hash":"3b18f6859d901fc518291e7daca0f067379b39f8","modified":1490019216000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488216496000},{"_id":"themes/next/.DS_Store","hash":"19d156d73d4e2a44dc45b36b74c908bb699144be","modified":1490075884000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488216496000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488216496000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488216496000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488216496000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488216496000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488216496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488216496000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488216496000},{"_id":"themes/next/_config.yml","hash":"6576f34441ed131e07b8968ddc4d10027fcfb333","modified":1489986978000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488216496000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488216496000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488216496000},{"_id":"source/favicon.ico","hash":"c020c0be2d7627f2356b32659f32be6febcc2620","modified":1489975832000},{"_id":"source/404/404.html","hash":"f4336795df3e13a0784cb66ca1ac7c4dff3951e2","modified":1490075435000},{"_id":"source/_posts/C语言链表.md","hash":"44007990c5f5528785686c26f4ecfbc384793b2a","modified":1490598978000},{"_id":"source/_posts/hacker.md","hash":"1f60f4c4f46f67a76377e5b40af32d1f0a9ce2d0","modified":1491808639000},{"_id":"source/404/index.html","hash":"8f8924aec628b7416f7797fbd673f713a0dfd8a6","modified":1489195678000},{"_id":"source/404/index.md","hash":"83ea702bd687a395d488dd75b8d4e9e4449161a4","modified":1490075373000},{"_id":"source/_posts/1.png","hash":"2baa283a21247b69a8e7191fb8dbd86c8d1b6c0c","modified":1482367280000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1491991024000},{"_id":"source/_posts/测试驱动开发.md","hash":"0842e012c265048950f442666e67fa47562eed24","modified":1491808984000},{"_id":"source/_posts/文章测试.md","hash":"f3b155b37e45ad251769af6c971dc39aa24dbdf9","modified":1489913575000},{"_id":"source/_posts/读构建之法体会.md","hash":"f999e762e8c077ab5310aa0c68ceca9c24323a77","modified":1489928837000},{"_id":"source/_posts/构造之法第2章.md","hash":"72c3423cac664b35c7c95da1e7c12f608c06326d","modified":1489983797000},{"_id":"source/_posts/构造之法第5章.md","hash":"d709dc3bf60203e85fa9703dfac0e99770906a93","modified":1489994027000},{"_id":"source/images/.DS_Store","hash":"71c43fd7f1e57909f2aef174c9124bb68fa59120","modified":1489915468000},{"_id":"source/images/jenius.jpeg","hash":"5d39dc47580954bfe3100f5de942eedb51b4dffe","modified":1489915452000},{"_id":"source/images/shouji.png","hash":"1e23085cc0cb451657ed5a9498e22bc4f1a16590","modified":1489994006000},{"_id":"source/images/x.jpg","hash":"62f2395f13310d950a0c182f04702693bf8fde2c","modified":1491808777000},{"_id":"source/images/v.jpg","hash":"e55e0db620b6f13f9b9bf1345cfb160e6bc7cb36","modified":1491808690000},{"_id":"source/title/index.md","hash":"18bf91f6a902164a72928497a5f2618c059fe562","modified":1489801779000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488216496000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488216496000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488216496000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488216496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488216496000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488216496000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488216496000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488216496000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488216496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1488216496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488216496000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488216496000},{"_id":"themes/next/layout/.DS_Store","hash":"e84bf3afd6355731147f3221ee9167aa4f9dcfc8","modified":1489928584000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488216496000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488216496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488216496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488216496000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488216496000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488216496000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488216496000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488216496000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488216496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488216496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488216496000},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1490075734000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488216496000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488216496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488216496000},{"_id":"source/images/avatar.jpg","hash":"f405e9b933f8528a205d7aa3a0a90c864b2b0927","modified":1477393638000},{"_id":"source/images/waterfall.png","hash":"e8d4535dad777ba3d54acbff743eda0d38d5510e","modified":1489993788000},{"_id":"source/images/xieafterupdate.png","hash":"c6e44c0821dcbaa2d16757bcbde34b2415938dcb","modified":1489993625000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"source/images/guanliao.png","hash":"1f5ce00fbb4a29458c3f5355af306954de56942f","modified":1489993263000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488216496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488216496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488216496000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"a20efe2fe2d4413e8ec169895117bef0361d2289","modified":1489928531000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488216496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488216496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488216496000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488216496000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488216496000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488216496000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488216496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488216496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488216496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488216496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488216496000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488216496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488216496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488216496000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488216496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488216496000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488216496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488216496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488216496000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488216496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488216496000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488216496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488216496000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488216496000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488216496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488216496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488216496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488216496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488216496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488216496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488216496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488216496000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488216496000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488216496000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488216496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488216496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488216496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488216496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488216496000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488216496000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488216496000},{"_id":"source/images/soft classify.png","hash":"46784769e7a09b50fe30ed0c165dc7bc92ab49f3","modified":1489927291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488216496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488216496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488216496000},{"_id":"source/images/hacker.jpg","hash":"67e14331553e3c11a0979004072378aa8fa15ed1","modified":1491469521000},{"_id":"public/404.html","hash":"5c860be5b0c8718a5100b53112ea38cda0b29ca2","modified":1491991842493},{"_id":"public/404/404.html","hash":"8d109b3897f154b62cb306782c9fcfcf87da3999","modified":1491991842493},{"_id":"public/404/index.html","hash":"4b7207b30976a2ce92a41b04884c57d138e31ba0","modified":1491991842494},{"_id":"public/title/index.html","hash":"867e1c85e9931fd55435a648393ba79dbdf3366a","modified":1491991842494},{"_id":"public/2017/04/06/hacker/index.html","hash":"ab90f8fa53a4fd0ce4ade2065a2ee01e8865abe2","modified":1491991842494},{"_id":"public/2017/03/20/构造之法第2章/index.html","hash":"42a9c3046ff4e5bee68bdc1fa48c4c63940358dc","modified":1491991842494},{"_id":"public/2017/03/19/文章测试/index.html","hash":"f1059dc06f44cb462c0102705bbafe217ec26f8e","modified":1491991842494},{"_id":"public/2017/03/17/hello-world/index.html","hash":"727facbdb8946e15ffe9cec9bf9bcc1fd4997691","modified":1491991842494},{"_id":"public/archives/index.html","hash":"80c583594061aa2a0fc3308efb497129a1af9325","modified":1491991842494},{"_id":"public/archives/2017/index.html","hash":"16d46c7236b7db7b1659daa1844fbd2140760e0c","modified":1491991842494},{"_id":"public/archives/2017/03/index.html","hash":"d8d3676811e318dc2b9b82f538bbf0cc091d5934","modified":1491991842494},{"_id":"public/archives/2017/04/index.html","hash":"209a044f49842f0aa829640ed6d654a827bc3f43","modified":1491991842494},{"_id":"public/2017/04/10/测试驱动开发/index.html","hash":"07a878f437916ea42d075a0e85e40f872b335003","modified":1491991842494},{"_id":"public/2017/03/24/C语言链表/index.html","hash":"939bec570617d77698c0c61dacfa99fb2bb4d601","modified":1491991842494},{"_id":"public/2017/03/20/构造之法第5章/index.html","hash":"f8bfdeec007cfbb3f22cba73d5a110d4d94bb6aa","modified":1491991842494},{"_id":"public/2017/03/19/读构建之法体会/index.html","hash":"74f54ff0730c7f88d925f930f43ce6ac8032c3cd","modified":1491991842494},{"_id":"public/index.html","hash":"264be6dbd9a1b66e5000682c0b0f1eb68e934b53","modified":1491991842494},{"_id":"public/CNAME","hash":"3b18f6859d901fc518291e7daca0f067379b39f8","modified":1491991842512},{"_id":"public/images/jenius.jpeg","hash":"5d39dc47580954bfe3100f5de942eedb51b4dffe","modified":1491991842512},{"_id":"public/images/x.jpg","hash":"62f2395f13310d950a0c182f04702693bf8fde2c","modified":1491991842512},{"_id":"public/images/shouji.png","hash":"1e23085cc0cb451657ed5a9498e22bc4f1a16590","modified":1491991842512},{"_id":"public/images/v.jpg","hash":"e55e0db620b6f13f9b9bf1345cfb160e6bc7cb36","modified":1491991842513},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1491991842513},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491991842513},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491991842513},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491991842513},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491991842513},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491991842513},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491991842513},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491991842513},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491991842513},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491991842513},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491991842513},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491991842513},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491991842513},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491991842513},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491991842513},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1491991842513},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491991842514},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491991842514},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491991842514},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491991842514},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491991842514},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491991842514},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491991842514},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491991842514},{"_id":"public/favicon.ico","hash":"c020c0be2d7627f2356b32659f32be6febcc2620","modified":1491991843285},{"_id":"public/images/xieafterupdate.png","hash":"c6e44c0821dcbaa2d16757bcbde34b2415938dcb","modified":1491991843287},{"_id":"public/images/waterfall.png","hash":"e8d4535dad777ba3d54acbff743eda0d38d5510e","modified":1491991843296},{"_id":"public/images/avatar.jpg","hash":"f405e9b933f8528a205d7aa3a0a90c864b2b0927","modified":1491991843296},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1491991843296},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1491991843296},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1491991843296},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1491991843296},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491991843302},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1491991843302},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1491991843302},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491991843302},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491991843302},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1491991843302},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491991843302},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491991843302},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1491991843302},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491991843302},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1491991843302},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491991843302},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491991843302},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491991843302},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491991843303},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491991843303},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491991843303},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491991843303},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491991843303},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491991843303},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491991843303},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1491991843303},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491991843303},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491991843303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491991843303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491991843303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491991843303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491991843303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491991843303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491991843303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491991843303},{"_id":"public/css/main.css","hash":"0137341065d156a4a0c6c522aaa4407203fb524e","modified":1491991843303},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491991843303},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491991843303},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491991843303},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491991843303},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491991843303},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491991843303},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1491991843303},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1491991843303},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491991843303},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1491991843304},{"_id":"public/images/guanliao.png","hash":"1f5ce00fbb4a29458c3f5355af306954de56942f","modified":1491991843304},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1491991843304},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1491991843322},{"_id":"public/images/soft classify.png","hash":"46784769e7a09b50fe30ed0c165dc7bc92ab49f3","modified":1491991843330},{"_id":"public/images/hacker.jpg","hash":"67e14331553e3c11a0979004072378aa8fa15ed1","modified":1491991843354}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2017-03-27T05:37:45.000Z","updated":"2017-03-21T05:55:34.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj1etf4hs00006lu2gpmarwo2","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"_content":"<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","source":"404/404.html","raw":"<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","date":"2017-03-27T05:37:45.000Z","updated":"2017-03-21T05:50:35.000Z","path":"404/404.html","title":"","comments":1,"layout":"page","_id":"cj1etf4mt00016lu2sce1d72m","content":"<html>\n    <head>\n         <meta charset=\"UTF-8\">\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","excerpt":"","more":"<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Canvas 仿黑客帝国 404 界面</title>\n    <style>\n        html, body {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            overflow: hidden;\n        }\n        #canvas {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <script>\n        function RainBy404(elc, str, size){\n            if(typeof elc == \"string\") elc = document.querySelector(elc);\n\n            // 动画函数\n            var fastAnimation = function (fn) {\n                return requestAnimationFrame ||\n                        webkitRequestAnimationFrame ||\n                        mozRequestAnimationFrame ||\n                        function (callback) {\n                            setTimeout(callback, 1000 / 60);\n                        };\n            }();\n\n            // 文字像素化\n            function str2matrix(str, w, h){\n                var matrix = [];\n                for(var i = 0; i < w; i++){\n                    matrix[i] = [];\n                    for(var j = 0; j < h; j++){\n                        matrix[i][j] = 0;\n                    }\n                }\n\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = w;\n                canvas.height = h;\n                var context = canvas.getContext(\"2d\"),\n                    fontSize = w * 0.3 / str.length,\n                    imgData = [];\n\n                context.fillStyle = \"white\";\n                context.fillRect(0, 0, w, h);\n\n                context.fillStyle = \"black\";\n                context.font = fontSize + \"px Calibri\";\n                context.textBaseline = \"middle\";\n                context.fillText(str, (w - context.measureText(str).width) / 2, h / 2);\n\n                try {\n                    imgData = context.getImageData(0 ,0, w, h).data;\n                } catch(e){\n\n                }\n\n                for(var i = 0; i < imgData.length; i+=4){\n                    r = imgData[i];\n                    g = imgData[i+1];\n                    b = imgData[i+2];\n                    gray = r*0.2126 + g*0.7152 + b*0.0722; //RGB转YUV\n\n                    matrix[parseInt(i / 4 % w)][parseInt(i / 4 / w)] = gray < 250 ? 1 : 0;\n                }\n\n                return matrix;\n            }\n\n            // 定义水滴对象\n            function Drop(str, x, y, rows){\n                this.i = 0;\n                this.s = Math.random()*10+\"\";\n                this.x = x || 0;\n                this.y = y || 0;\n                this.rows = rows;\n            }\n            Drop.prototype = {\n                constructor: Drop,\n\n                getChar: function(){\n                    return this.s.charAt(this.i % this.s.length);\n                },\n\n                reset: function(){\n                    this.i = 0;\n                    this.y = 0;\n                },\n\n                drop: function(){\n                    this.i++;\n                    this.y++;\n                    if(this.y > this.rows && Math.random() > 0.975) this.reset();\n                }\n            }\n\n            // 初始化参数\n            var cols = Math.round(elc.width / size);\n            var rows = Math.round(elc.height / size);\n            var drops = [];\n            var matrix = null;\n            var context = elc.getContext(\"2d\");\n\n            function draw(){\n                // 画布覆盖\n                context.fillStyle = \"rgba(0,0,0,0.05)\";\n                context.fillRect(0, 0, elc.width, elc.height);\n\n                // 水滴描绘\n                drops.forEach(function(drop){\n                    context.fillStyle = (matrix && matrix[drop.x][drop.y]) ? \"red\" : \"rgb(0, 97, 14)\";\n                    context.font = size + \"px Calibri\";\n                    context.fillText(drop.getChar(), drop.x * size, drop.y * size);\n                    drop.drop();\n                })\n\n                // 重复绘制\n                fastAnimation(draw);\n            }\n\n            function start(){\n                // 生成水滴\n                for(var i = 0; i < cols; i++){\n                    var drop = new Drop(str, i, 0, rows);\n                    drops.push(drop);\n                }\n\n                // 生成像素信息\n                matrix = str2matrix(str, cols, rows);\n\n                // 画布覆盖\n                context.fillStyle = \"black\";\n                context.fillRect(0, 0, elc.width, elc.height);\n                // 重复绘制\n                draw();\n            }\n\n            return {\n                start: start\n            }\n        }\n\n        var canvas = document.querySelector(\"#canvas\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var rain = new RainBy404(canvas, \"404\", 12);\n        rain.start();\n    </script>\n</body>\n</html>\n","source":"404/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Canvas 仿黑客帝国 404 界面</title>\n    <style>\n        html, body {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            overflow: hidden;\n        }\n        #canvas {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <script>\n        function RainBy404(elc, str, size){\n            if(typeof elc == \"string\") elc = document.querySelector(elc);\n\n            // 动画函数\n            var fastAnimation = function (fn) {\n                return requestAnimationFrame ||\n                        webkitRequestAnimationFrame ||\n                        mozRequestAnimationFrame ||\n                        function (callback) {\n                            setTimeout(callback, 1000 / 60);\n                        };\n            }();\n\n            // 文字像素化\n            function str2matrix(str, w, h){\n                var matrix = [];\n                for(var i = 0; i < w; i++){\n                    matrix[i] = [];\n                    for(var j = 0; j < h; j++){\n                        matrix[i][j] = 0;\n                    }\n                }\n\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = w;\n                canvas.height = h;\n                var context = canvas.getContext(\"2d\"),\n                    fontSize = w * 0.3 / str.length,\n                    imgData = [];\n\n                context.fillStyle = \"white\";\n                context.fillRect(0, 0, w, h);\n\n                context.fillStyle = \"black\";\n                context.font = fontSize + \"px Calibri\";\n                context.textBaseline = \"middle\";\n                context.fillText(str, (w - context.measureText(str).width) / 2, h / 2);\n\n                try {\n                    imgData = context.getImageData(0 ,0, w, h).data;\n                } catch(e){\n\n                }\n\n                for(var i = 0; i < imgData.length; i+=4){\n                    r = imgData[i];\n                    g = imgData[i+1];\n                    b = imgData[i+2];\n                    gray = r*0.2126 + g*0.7152 + b*0.0722; //RGB转YUV\n\n                    matrix[parseInt(i / 4 % w)][parseInt(i / 4 / w)] = gray < 250 ? 1 : 0;\n                }\n\n                return matrix;\n            }\n\n            // 定义水滴对象\n            function Drop(str, x, y, rows){\n                this.i = 0;\n                this.s = Math.random()*10+\"\";\n                this.x = x || 0;\n                this.y = y || 0;\n                this.rows = rows;\n            }\n            Drop.prototype = {\n                constructor: Drop,\n\n                getChar: function(){\n                    return this.s.charAt(this.i % this.s.length);\n                },\n\n                reset: function(){\n                    this.i = 0;\n                    this.y = 0;\n                },\n\n                drop: function(){\n                    this.i++;\n                    this.y++;\n                    if(this.y > this.rows && Math.random() > 0.975) this.reset();\n                }\n            }\n\n            // 初始化参数\n            var cols = Math.round(elc.width / size);\n            var rows = Math.round(elc.height / size);\n            var drops = [];\n            var matrix = null;\n            var context = elc.getContext(\"2d\");\n\n            function draw(){\n                // 画布覆盖\n                context.fillStyle = \"rgba(0,0,0,0.05)\";\n                context.fillRect(0, 0, elc.width, elc.height);\n\n                // 水滴描绘\n                drops.forEach(function(drop){\n                    context.fillStyle = (matrix && matrix[drop.x][drop.y]) ? \"red\" : \"rgb(0, 97, 14)\";\n                    context.font = size + \"px Calibri\";\n                    context.fillText(drop.getChar(), drop.x * size, drop.y * size);\n                    drop.drop();\n                })\n\n                // 重复绘制\n                fastAnimation(draw);\n            }\n\n            function start(){\n                // 生成水滴\n                for(var i = 0; i < cols; i++){\n                    var drop = new Drop(str, i, 0, rows);\n                    drops.push(drop);\n                }\n\n                // 生成像素信息\n                matrix = str2matrix(str, cols, rows);\n\n                // 画布覆盖\n                context.fillStyle = \"black\";\n                context.fillRect(0, 0, elc.width, elc.height);\n                // 重复绘制\n                draw();\n            }\n\n            return {\n                start: start\n            }\n        }\n\n        var canvas = document.querySelector(\"#canvas\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var rain = new RainBy404(canvas, \"404\", 12);\n        rain.start();\n    </script>\n</body>\n</html>\n","date":"2017-03-27T05:37:45.000Z","updated":"2017-03-11T01:27:58.000Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"cj1etf4n000036lu2oehvln04","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Canvas 仿黑客帝国 404 界面</title>\n    <style>\n        html, body {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            overflow: hidden;\n        }\n        #canvas {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <script>\n        function RainBy404(elc, str, size){\n            if(typeof elc == \"string\") elc = document.querySelector(elc);\n\n            // 动画函数\n            var fastAnimation = function (fn) {\n                return requestAnimationFrame ||\n                        webkitRequestAnimationFrame ||\n                        mozRequestAnimationFrame ||\n                        function (callback) {\n                            setTimeout(callback, 1000 / 60);\n                        };\n            }();\n\n            // 文字像素化\n            function str2matrix(str, w, h){\n                var matrix = [];\n                for(var i = 0; i < w; i++){\n                    matrix[i] = [];\n                    for(var j = 0; j < h; j++){\n                        matrix[i][j] = 0;\n                    }\n                }\n\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = w;\n                canvas.height = h;\n                var context = canvas.getContext(\"2d\"),\n                    fontSize = w * 0.3 / str.length,\n                    imgData = [];\n\n                context.fillStyle = \"white\";\n                context.fillRect(0, 0, w, h);\n\n                context.fillStyle = \"black\";\n                context.font = fontSize + \"px Calibri\";\n                context.textBaseline = \"middle\";\n                context.fillText(str, (w - context.measureText(str).width) / 2, h / 2);\n\n                try {\n                    imgData = context.getImageData(0 ,0, w, h).data;\n                } catch(e){\n\n                }\n\n                for(var i = 0; i < imgData.length; i+=4){\n                    r = imgData[i];\n                    g = imgData[i+1];\n                    b = imgData[i+2];\n                    gray = r*0.2126 + g*0.7152 + b*0.0722; //RGB转YUV\n\n                    matrix[parseInt(i / 4 % w)][parseInt(i / 4 / w)] = gray < 250 ? 1 : 0;\n                }\n\n                return matrix;\n            }\n\n            // 定义水滴对象\n            function Drop(str, x, y, rows){\n                this.i = 0;\n                this.s = Math.random()*10+\"\";\n                this.x = x || 0;\n                this.y = y || 0;\n                this.rows = rows;\n            }\n            Drop.prototype = {\n                constructor: Drop,\n\n                getChar: function(){\n                    return this.s.charAt(this.i % this.s.length);\n                },\n\n                reset: function(){\n                    this.i = 0;\n                    this.y = 0;\n                },\n\n                drop: function(){\n                    this.i++;\n                    this.y++;\n                    if(this.y > this.rows && Math.random() > 0.975) this.reset();\n                }\n            }\n\n            // 初始化参数\n            var cols = Math.round(elc.width / size);\n            var rows = Math.round(elc.height / size);\n            var drops = [];\n            var matrix = null;\n            var context = elc.getContext(\"2d\");\n\n            function draw(){\n                // 画布覆盖\n                context.fillStyle = \"rgba(0,0,0,0.05)\";\n                context.fillRect(0, 0, elc.width, elc.height);\n\n                // 水滴描绘\n                drops.forEach(function(drop){\n                    context.fillStyle = (matrix && matrix[drop.x][drop.y]) ? \"red\" : \"rgb(0, 97, 14)\";\n                    context.font = size + \"px Calibri\";\n                    context.fillText(drop.getChar(), drop.x * size, drop.y * size);\n                    drop.drop();\n                })\n\n                // 重复绘制\n                fastAnimation(draw);\n            }\n\n            function start(){\n                // 生成水滴\n                for(var i = 0; i < cols; i++){\n                    var drop = new Drop(str, i, 0, rows);\n                    drops.push(drop);\n                }\n\n                // 生成像素信息\n                matrix = str2matrix(str, cols, rows);\n\n                // 画布覆盖\n                context.fillStyle = \"black\";\n                context.fillRect(0, 0, elc.width, elc.height);\n                // 重复绘制\n                draw();\n            }\n\n            return {\n                start: start\n            }\n        }\n\n        var canvas = document.querySelector(\"#canvas\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var rain = new RainBy404(canvas, \"404\", 12);\n        rain.start();\n    </script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Canvas 仿黑客帝国 404 界面</title>\n    <style>\n        html, body {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            overflow: hidden;\n        }\n        #canvas {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <script>\n        function RainBy404(elc, str, size){\n            if(typeof elc == \"string\") elc = document.querySelector(elc);\n\n            // 动画函数\n            var fastAnimation = function (fn) {\n                return requestAnimationFrame ||\n                        webkitRequestAnimationFrame ||\n                        mozRequestAnimationFrame ||\n                        function (callback) {\n                            setTimeout(callback, 1000 / 60);\n                        };\n            }();\n\n            // 文字像素化\n            function str2matrix(str, w, h){\n                var matrix = [];\n                for(var i = 0; i < w; i++){\n                    matrix[i] = [];\n                    for(var j = 0; j < h; j++){\n                        matrix[i][j] = 0;\n                    }\n                }\n\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = w;\n                canvas.height = h;\n                var context = canvas.getContext(\"2d\"),\n                    fontSize = w * 0.3 / str.length,\n                    imgData = [];\n\n                context.fillStyle = \"white\";\n                context.fillRect(0, 0, w, h);\n\n                context.fillStyle = \"black\";\n                context.font = fontSize + \"px Calibri\";\n                context.textBaseline = \"middle\";\n                context.fillText(str, (w - context.measureText(str).width) / 2, h / 2);\n\n                try {\n                    imgData = context.getImageData(0 ,0, w, h).data;\n                } catch(e){\n\n                }\n\n                for(var i = 0; i < imgData.length; i+=4){\n                    r = imgData[i];\n                    g = imgData[i+1];\n                    b = imgData[i+2];\n                    gray = r*0.2126 + g*0.7152 + b*0.0722; //RGB转YUV\n\n                    matrix[parseInt(i / 4 % w)][parseInt(i / 4 / w)] = gray < 250 ? 1 : 0;\n                }\n\n                return matrix;\n            }\n\n            // 定义水滴对象\n            function Drop(str, x, y, rows){\n                this.i = 0;\n                this.s = Math.random()*10+\"\";\n                this.x = x || 0;\n                this.y = y || 0;\n                this.rows = rows;\n            }\n            Drop.prototype = {\n                constructor: Drop,\n\n                getChar: function(){\n                    return this.s.charAt(this.i % this.s.length);\n                },\n\n                reset: function(){\n                    this.i = 0;\n                    this.y = 0;\n                },\n\n                drop: function(){\n                    this.i++;\n                    this.y++;\n                    if(this.y > this.rows && Math.random() > 0.975) this.reset();\n                }\n            }\n\n            // 初始化参数\n            var cols = Math.round(elc.width / size);\n            var rows = Math.round(elc.height / size);\n            var drops = [];\n            var matrix = null;\n            var context = elc.getContext(\"2d\");\n\n            function draw(){\n                // 画布覆盖\n                context.fillStyle = \"rgba(0,0,0,0.05)\";\n                context.fillRect(0, 0, elc.width, elc.height);\n\n                // 水滴描绘\n                drops.forEach(function(drop){\n                    context.fillStyle = (matrix && matrix[drop.x][drop.y]) ? \"red\" : \"rgb(0, 97, 14)\";\n                    context.font = size + \"px Calibri\";\n                    context.fillText(drop.getChar(), drop.x * size, drop.y * size);\n                    drop.drop();\n                })\n\n                // 重复绘制\n                fastAnimation(draw);\n            }\n\n            function start(){\n                // 生成水滴\n                for(var i = 0; i < cols; i++){\n                    var drop = new Drop(str, i, 0, rows);\n                    drops.push(drop);\n                }\n\n                // 生成像素信息\n                matrix = str2matrix(str, cols, rows);\n\n                // 画布覆盖\n                context.fillStyle = \"black\";\n                context.fillRect(0, 0, elc.width, elc.height);\n                // 重复绘制\n                draw();\n            }\n\n            return {\n                start: start\n            }\n        }\n\n        var canvas = document.querySelector(\"#canvas\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var rain = new RainBy404(canvas, \"404\", 12);\n        rain.start();\n    </script>\n</body>\n</html>\n"},{"title":"404","date":"2017-03-21T05:21:56.000Z","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2017-03-21 13:21:56\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n","updated":"2017-03-21T05:49:33.000Z","path":"/404.html","layout":"page","_id":"cj1etf4n300056lu2jj03hxkg","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n","excerpt":"","more":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n"},{"title":"title","date":"2017-03-18T01:48:38.000Z","_content":"# hello","source":"title/index.md","raw":"---\ntitle: title\ndate: 2017-03-18 09:48:38\n---\n# hello","updated":"2017-03-18T01:49:39.000Z","path":"title/index.html","comments":1,"layout":"page","_id":"cj1etf4n700076lu2j1nnja3d","content":"<h1 id=\"hello\"><a href=\"#hello\" class=\"headerlink\" title=\"hello\"></a>hello</h1>","excerpt":"","more":"<h1 id=\"hello\"><a href=\"#hello\" class=\"headerlink\" title=\"hello\"></a>hello</h1>"}],"Post":[{"title":"C语言链表","date":"2017-03-24T10:06:43.000Z","_content":"## 链表\n## 代码 linked-list.c\n``` c\n#include \"node.h\"\n#include <stdio.h>\n#include <stdlib.h>\n\n// typedef struct _node{\n// \tint value;\n// \tstruct _node *next;\n// }Node;\n\ntypedef struct _list{ // 没有做尾指针\n\tNode *head;\n\tNode *tail;\n} List;\n\n\nvoid add(List *list, int number);\nvoid add2(List *list, int number);\n\nint main(int argc, char const *argv[])\n{\n\tList list;\n\tlist.head = list.tail = NULL;\n\tint number;\n\tdo{\n\t\tscanf(\"%d\",&number);\n\t\tif(number != -1){\n\t\t\tadd2(&list,number);\n\t\t}\n\t}while(number != -1);\n\tfor (Node *q = list.head;q;q=q->next){\n\t\tprintf(\"%d\",q->value);\n\t}\n\treturn 0;\n}\n\nvoid add(List *list, int number){\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tNode *last = list->head;\n\tif(last){\n\t\twhile(last->next){\n\t\t\tlast = last->next;\n\t\t}\n\t\tlast->next = p;\n\t}else{\n\t\tlist->head = p;\n\t}\n\n\n}\n\nvoid add2(List *list, int number){  // 哎，早画图早解决了服了\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tif(list->tail){\n\t\t(list->tail)->next = p;\n\t\tlist->tail = (list->tail)->next;\n\n\t}else{\n\t\tlist->head = list->tail = p;\n\n\t}\n\n}\n```\n这是实现了基本的创建链表功能，有两个版本第一个版本(函数add())与第二个版本(add2())相比，第二个版本是具有为指针的每一次不用从头遍历到尾节点。\n##删除加寻找\n``` c\n#include \"node.h\"\n#include <stdio.h>\n#include <stdlib.h>\n\n// typedef struct _node{\n// \tint value;\n// \tstruct _node *next;\n// }Node;\n\ntypedef struct _list{ // 没有为检点的版本\n\tNode *head;\n\tNode *tail;\n} List;\n\n// typedef struct _list{\n// \tNode *head;\n// \tNode *tail;\n// } List;\n\n\n\nvoid add(List *list, int number);\nvoid add2(List *list, int number);\nvoid print(List *list);\nvoid queryAndDelete(List *list, int number);\n\nint main(int argc, char const *argv[])\n{\n\tList list;\n\tlist.head = list.tail = NULL;\n\tint number;\n\tdo{\n\t\tscanf(\"%d\",&number);\n\t\tif(number != -1){\n\t\t\tadd2(&list,number);\n\t\t}\n\t}while(number != -1);\n\tprint(&list);\n\tscanf(\"%d\",&number);\n\tqueryAndDelete(&list,number);\n\tprint(&list);\n\treturn 0;\n}\n\nvoid add(List *list, int number){\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tNode *last = list->head;\n\tif(last){\n\t\twhile(last->next){\n\t\t\tlast = last->next;\n\t\t}\n\t\tlast->next = p;\n\t}else{\n\t\tlist->head = p;\n\t}\n\n\n}\n\nvoid add2(List *list, int number){  // 哎，早画图早解决了服了\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tif(list->tail){\n\t\t(list->tail)->next = p;\n\t\tlist->tail = (list->tail)->next;\n\n\t}else{\n\t\tlist->head = list->tail = p;\n\n\t}\n\n}\n\nvoid print(List *list){\n\tfor (Node *q = list->head;q;q=q->next){\n\t\tprintf(\"%d\\t\",q->value);\n\t}\n\tprintf(\"\\n\");\n}\nvoid queryAndDelete(List *list,int number){\n\tint isFound = 0;\n\tNode *p = NULL;\n\tfor ( Node *q = list->head;q;p = q,q=q->next){\n\t\tif(q->value == number){\n\t\t\tisFound = 1;\n\t\t\tif(q){\n\t\t\t\tp->next = q->next;\n\t\t\t}else{\n\t\t\t\t(list->head)->next = q->next;\n\t\t\t}\n\t\t\tfree(q);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isFound){\n\t\tprintf(\"找到了\\n\");\n\t}\n}\n\n```\n","source":"_posts/C语言链表.md","raw":"---\ntitle: C语言链表\ndate: 2017-03-24 18:06:43\ntags:\n---\n## 链表\n## 代码 linked-list.c\n``` c\n#include \"node.h\"\n#include <stdio.h>\n#include <stdlib.h>\n\n// typedef struct _node{\n// \tint value;\n// \tstruct _node *next;\n// }Node;\n\ntypedef struct _list{ // 没有做尾指针\n\tNode *head;\n\tNode *tail;\n} List;\n\n\nvoid add(List *list, int number);\nvoid add2(List *list, int number);\n\nint main(int argc, char const *argv[])\n{\n\tList list;\n\tlist.head = list.tail = NULL;\n\tint number;\n\tdo{\n\t\tscanf(\"%d\",&number);\n\t\tif(number != -1){\n\t\t\tadd2(&list,number);\n\t\t}\n\t}while(number != -1);\n\tfor (Node *q = list.head;q;q=q->next){\n\t\tprintf(\"%d\",q->value);\n\t}\n\treturn 0;\n}\n\nvoid add(List *list, int number){\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tNode *last = list->head;\n\tif(last){\n\t\twhile(last->next){\n\t\t\tlast = last->next;\n\t\t}\n\t\tlast->next = p;\n\t}else{\n\t\tlist->head = p;\n\t}\n\n\n}\n\nvoid add2(List *list, int number){  // 哎，早画图早解决了服了\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tif(list->tail){\n\t\t(list->tail)->next = p;\n\t\tlist->tail = (list->tail)->next;\n\n\t}else{\n\t\tlist->head = list->tail = p;\n\n\t}\n\n}\n```\n这是实现了基本的创建链表功能，有两个版本第一个版本(函数add())与第二个版本(add2())相比，第二个版本是具有为指针的每一次不用从头遍历到尾节点。\n##删除加寻找\n``` c\n#include \"node.h\"\n#include <stdio.h>\n#include <stdlib.h>\n\n// typedef struct _node{\n// \tint value;\n// \tstruct _node *next;\n// }Node;\n\ntypedef struct _list{ // 没有为检点的版本\n\tNode *head;\n\tNode *tail;\n} List;\n\n// typedef struct _list{\n// \tNode *head;\n// \tNode *tail;\n// } List;\n\n\n\nvoid add(List *list, int number);\nvoid add2(List *list, int number);\nvoid print(List *list);\nvoid queryAndDelete(List *list, int number);\n\nint main(int argc, char const *argv[])\n{\n\tList list;\n\tlist.head = list.tail = NULL;\n\tint number;\n\tdo{\n\t\tscanf(\"%d\",&number);\n\t\tif(number != -1){\n\t\t\tadd2(&list,number);\n\t\t}\n\t}while(number != -1);\n\tprint(&list);\n\tscanf(\"%d\",&number);\n\tqueryAndDelete(&list,number);\n\tprint(&list);\n\treturn 0;\n}\n\nvoid add(List *list, int number){\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tNode *last = list->head;\n\tif(last){\n\t\twhile(last->next){\n\t\t\tlast = last->next;\n\t\t}\n\t\tlast->next = p;\n\t}else{\n\t\tlist->head = p;\n\t}\n\n\n}\n\nvoid add2(List *list, int number){  // 哎，早画图早解决了服了\n\t// add to linked-list\n\tNode *p = (Node*)malloc(sizeof(Node));\n\tp->value = number;\n\tp->next = NULL;\n\t// find last node\n\tif(list->tail){\n\t\t(list->tail)->next = p;\n\t\tlist->tail = (list->tail)->next;\n\n\t}else{\n\t\tlist->head = list->tail = p;\n\n\t}\n\n}\n\nvoid print(List *list){\n\tfor (Node *q = list->head;q;q=q->next){\n\t\tprintf(\"%d\\t\",q->value);\n\t}\n\tprintf(\"\\n\");\n}\nvoid queryAndDelete(List *list,int number){\n\tint isFound = 0;\n\tNode *p = NULL;\n\tfor ( Node *q = list->head;q;p = q,q=q->next){\n\t\tif(q->value == number){\n\t\t\tisFound = 1;\n\t\t\tif(q){\n\t\t\t\tp->next = q->next;\n\t\t\t}else{\n\t\t\t\t(list->head)->next = q->next;\n\t\t\t}\n\t\t\tfree(q);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isFound){\n\t\tprintf(\"找到了\\n\");\n\t}\n}\n\n```\n","slug":"C语言链表","published":1,"updated":"2017-03-27T07:16:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4mu00026lu2xd9tx9fu","content":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h2 id=\"代码-linked-list-c\"><a href=\"#代码-linked-list-c\" class=\"headerlink\" title=\"代码 linked-list.c\"></a>代码 linked-list.c</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"node.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _node&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tint value;</span></div><div class=\"line\"><span class=\"comment\">// \tstruct _node *next;</span></div><div class=\"line\"><span class=\"comment\">// &#125;Node;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _list&#123; <span class=\"comment\">// 没有做尾指针</span></div><div class=\"line\">\tNode *head;</div><div class=\"line\">\tNode *tail;</div><div class=\"line\">&#125; List;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tList <span class=\"built_in\">list</span>;</div><div class=\"line\">\t<span class=\"built_in\">list</span>.head = <span class=\"built_in\">list</span>.tail = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> number;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(number != <span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\t\tadd2(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(number != <span class=\"number\">-1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Node *q = <span class=\"built_in\">list</span>.head;q;q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,q-&gt;value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\tNode *last = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(last)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(last-&gt;next)&#123;</div><div class=\"line\">\t\t\tlast = last-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlast-&gt;next = p;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = p;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;  <span class=\"comment\">// 哎，早画图早解决了服了</span></div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;tail)&#123;</div><div class=\"line\">\t\t(<span class=\"built_in\">list</span>-&gt;tail)-&gt;next = p;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;tail = (<span class=\"built_in\">list</span>-&gt;tail)-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = p;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是实现了基本的创建链表功能，有两个版本第一个版本(函数add())与第二个版本(add2())相比，第二个版本是具有为指针的每一次不用从头遍历到尾节点。</p>\n<p>##删除加寻找<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"node.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _node&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tint value;</span></div><div class=\"line\"><span class=\"comment\">// \tstruct _node *next;</span></div><div class=\"line\"><span class=\"comment\">// &#125;Node;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _list&#123; <span class=\"comment\">// 没有为检点的版本</span></div><div class=\"line\">\tNode *head;</div><div class=\"line\">\tNode *tail;</div><div class=\"line\">&#125; List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _list&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tNode *head;</span></div><div class=\"line\"><span class=\"comment\">// \tNode *tail;</span></div><div class=\"line\"><span class=\"comment\">// &#125; List;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List *<span class=\"built_in\">list</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">queryAndDelete</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tList <span class=\"built_in\">list</span>;</div><div class=\"line\">\t<span class=\"built_in\">list</span>.head = <span class=\"built_in\">list</span>.tail = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> number;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(number != <span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\t\tadd2(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(number != <span class=\"number\">-1</span>);</div><div class=\"line\">\tprint(&amp;<span class=\"built_in\">list</span>);</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\tqueryAndDelete(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\tprint(&amp;<span class=\"built_in\">list</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\tNode *last = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(last)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(last-&gt;next)&#123;</div><div class=\"line\">\t\t\tlast = last-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlast-&gt;next = p;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = p;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;  <span class=\"comment\">// 哎，早画图早解决了服了</span></div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;tail)&#123;</div><div class=\"line\">\t\t(<span class=\"built_in\">list</span>-&gt;tail)-&gt;next = p;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;tail = (<span class=\"built_in\">list</span>-&gt;tail)-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = p;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List *<span class=\"built_in\">list</span>)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Node *q = <span class=\"built_in\">list</span>-&gt;head;q;q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\t\"</span>,q-&gt;value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">queryAndDelete</span><span class=\"params\">(List *<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> isFound = <span class=\"number\">0</span>;</div><div class=\"line\">\tNode *p = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( Node *q = <span class=\"built_in\">list</span>-&gt;head;q;p = q,q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(q-&gt;value == number)&#123;</div><div class=\"line\">\t\t\tisFound = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q)&#123;</div><div class=\"line\">\t\t\t\tp-&gt;next = q-&gt;next;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t(<span class=\"built_in\">list</span>-&gt;head)-&gt;next = q-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">free</span>(q);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(isFound)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"找到了\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h2 id=\"代码-linked-list-c\"><a href=\"#代码-linked-list-c\" class=\"headerlink\" title=\"代码 linked-list.c\"></a>代码 linked-list.c</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"node.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _node&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tint value;</span></div><div class=\"line\"><span class=\"comment\">// \tstruct _node *next;</span></div><div class=\"line\"><span class=\"comment\">// &#125;Node;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _list&#123; <span class=\"comment\">// 没有做尾指针</span></div><div class=\"line\">\tNode *head;</div><div class=\"line\">\tNode *tail;</div><div class=\"line\">&#125; List;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tList <span class=\"built_in\">list</span>;</div><div class=\"line\">\t<span class=\"built_in\">list</span>.head = <span class=\"built_in\">list</span>.tail = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> number;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(number != <span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\t\tadd2(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(number != <span class=\"number\">-1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Node *q = <span class=\"built_in\">list</span>.head;q;q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,q-&gt;value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\tNode *last = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(last)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(last-&gt;next)&#123;</div><div class=\"line\">\t\t\tlast = last-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlast-&gt;next = p;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = p;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;  <span class=\"comment\">// 哎，早画图早解决了服了</span></div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;tail)&#123;</div><div class=\"line\">\t\t(<span class=\"built_in\">list</span>-&gt;tail)-&gt;next = p;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;tail = (<span class=\"built_in\">list</span>-&gt;tail)-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = p;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是实现了基本的创建链表功能，有两个版本第一个版本(函数add())与第二个版本(add2())相比，第二个版本是具有为指针的每一次不用从头遍历到尾节点。</p>\n<p>##删除加寻找<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"node.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _node&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tint value;</span></div><div class=\"line\"><span class=\"comment\">// \tstruct _node *next;</span></div><div class=\"line\"><span class=\"comment\">// &#125;Node;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _list&#123; <span class=\"comment\">// 没有为检点的版本</span></div><div class=\"line\">\tNode *head;</div><div class=\"line\">\tNode *tail;</div><div class=\"line\">&#125; List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typedef struct _list&#123;</span></div><div class=\"line\"><span class=\"comment\">// \tNode *head;</span></div><div class=\"line\"><span class=\"comment\">// \tNode *tail;</span></div><div class=\"line\"><span class=\"comment\">// &#125; List;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List *<span class=\"built_in\">list</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">queryAndDelete</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tList <span class=\"built_in\">list</span>;</div><div class=\"line\">\t<span class=\"built_in\">list</span>.head = <span class=\"built_in\">list</span>.tail = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> number;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(number != <span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\t\tadd2(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(number != <span class=\"number\">-1</span>);</div><div class=\"line\">\tprint(&amp;<span class=\"built_in\">list</span>);</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</div><div class=\"line\">\tqueryAndDelete(&amp;<span class=\"built_in\">list</span>,number);</div><div class=\"line\">\tprint(&amp;<span class=\"built_in\">list</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\tNode *last = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(last)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(last-&gt;next)&#123;</div><div class=\"line\">\t\t\tlast = last-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlast-&gt;next = p;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = p;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> number)</span></span>&#123;  <span class=\"comment\">// 哎，早画图早解决了服了</span></div><div class=\"line\">\t<span class=\"comment\">// add to linked-list</span></div><div class=\"line\">\tNode *p = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</div><div class=\"line\">\tp-&gt;value = number;</div><div class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"comment\">// find last node</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;tail)&#123;</div><div class=\"line\">\t\t(<span class=\"built_in\">list</span>-&gt;tail)-&gt;next = p;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;tail = (<span class=\"built_in\">list</span>-&gt;tail)-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = p;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List *<span class=\"built_in\">list</span>)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Node *q = <span class=\"built_in\">list</span>-&gt;head;q;q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\t\"</span>,q-&gt;value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">queryAndDelete</span><span class=\"params\">(List *<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> number)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> isFound = <span class=\"number\">0</span>;</div><div class=\"line\">\tNode *p = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( Node *q = <span class=\"built_in\">list</span>-&gt;head;q;p = q,q=q-&gt;next)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(q-&gt;value == number)&#123;</div><div class=\"line\">\t\t\tisFound = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q)&#123;</div><div class=\"line\">\t\t\t\tp-&gt;next = q-&gt;next;</div><div class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t(<span class=\"built_in\">list</span>-&gt;head)-&gt;next = q-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">free</span>(q);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(isFound)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"找到了\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"hacker","date":"2017-04-06T09:11:34.000Z","_content":"## hacker\n![Alt text](/images/hacker.jpg)\n","source":"_posts/hacker.md","raw":"---\ntitle: hacker\ndate: 2017-04-06 17:11:34\ntags:\n---\n## hacker\n![Alt text](/images/hacker.jpg)\n","slug":"hacker","published":1,"updated":"2017-04-10T07:17:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4n000046lu2u1n9nkfe","content":"<h2 id=\"hacker\"><a href=\"#hacker\" class=\"headerlink\" title=\"hacker\"></a>hacker</h2><p><img src=\"/images/hacker.jpg\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<h2 id=\"hacker\"><a href=\"#hacker\" class=\"headerlink\" title=\"hacker\"></a>hacker</h2><p><img src=\"/images/hacker.jpg\" alt=\"Alt text\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-17T13:18:15.000Z","updated":"2017-04-12T09:57:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4n400066lu2l0aibc2y","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"测试驱动开发","date":"2017-04-10T07:17:21.000Z","_content":"## 背景\n一个高效的软件开发过程对软件开发人员来说是至关重要的，决定着开发是痛苦的挣扎，还是不断进步的喜悦。国人对软件蓝领的不屑，对繁琐冗长的传统开发过程的不耐，使大多数开发人员无所适从。最近兴起的一些软件开发过程相关的技术，提供一些比较高效、实用的软件过程开发方法。其中比较基础、关键的一个技术就是测试驱动开发（Test-Driven Development）。虽然TDD光大于极限编程，但测试驱动开发完全可以单独应用。下面就从开发人员使用的角度进行介绍，使开发人员用最少的代价尽快理解、掌握、应用这种技术。下面分优势，原理，过程，原则，测试技术，Tips等方面进行讨论。\n## 1. 优势\nTDD的基本思路就是通过测试来推动整个开发的进行。而测试驱动开发技术并不只是单纯的测试工作。\n需求向来就是软件开发过程中感觉最不好明确描述、易变的东西。这里说的需求不只是指用户的需求，还包括对代码的使用需求。很多开发人员最害怕的就是后期还要修改某个类或者函数的接口进行修改或者扩展，为什么会发生这样的事情就是因为这部分代码的使用需求没有很好的描述。测试驱动开发就是通过编写测试用例，先考虑代码的使用需求（包括功能、过程、接口等），而且这个描述是无二义的，可执行验证的。\n通过编写这部分代码的测试用例，对其功能的分解、使用过程、接口都进行了设计。而且这种从使用角度对代码的设计通常更符合后期开发的需求。可测试的要求，对代码的内聚性的提高和复用都非常有益。因此测试驱动开发也是一种代码设计的过程。\n开发人员通常对编写文档非常厌烦，但要使用、理解别人的代码时通常又希望能有文档进行指导。而测试驱动开发过程中产生的测试用例代码就是对代码的最好的解释。\n快乐工作的基础就是对自己有信心，对自己的工作成果有信心。当前很多开发人员却经常在担心：“代码是否正确？”“辛苦编写的代码还有没有严重bug？”“修改的新代码对其他部分有没有影响？”。这种担心甚至导致某些代码应该修改却不敢修改的地步。测试驱动开发提供的测试集就可以作为你信心的来源。\n当然测试驱动开发最重要的功能还在于保障代码的正确性，能够迅速发现、定位bug。而迅速发现、定位bug是很多开发人员的梦想。针对关键代码的测试集，以及不断完善的测试用例，为迅速发现、定位bug提供了条件。\n我的一段功能非常复杂的代码使用TDD开发完成，真实环境应用中只发现几个bug，而且很快被定位解决。您在应用后，也一定会为那种自信的开发过程，功能不断增加、完善的感觉，迅速发现、定位bug的能力所感染，喜欢这个技术的。\n那么是什么样的原理、方法提供上面说的这些好处哪？下面我们就看看TDD的原理。\n## 2. 原理\n测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。\n我们这里把这个技术的应用领域从代码编写扩展到整个开发过程。应该对整个开发过程的各个阶段进行测试驱动，首先思考如何对这个阶段进行测试、验证、考核，并编写相关的测试文档，然后开始下一步工作，最后再验证相关的工作。下图是一个比较流行的测试模型：V测试模型。\n【图 V测试模型】\n![Alt text](/images/v.jpg)\n在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都应该考虑相对应的测试工作，完成相关的测试用例的设计、测试方案、测试计划的编写。这里提到的开发阶段只是举例，根据实际的开发活动进行调整。相关的测试文档也不一定是非常详细复杂的文档，或者什么形式，但应该养成测试驱动的习惯。\n关于测试模型，还有X测试模型。这个测试模型，我认为，是对详细阶段和编码阶段进行建模，应该说更详细的描述了详细设计和编码阶段的开发行为。及针对某个功能进行对应的测试驱动开发。\n【图 X测试模型】\n![Alt text](/images/x.jpg)\n## 3. 过程\n软件开发其他阶段的测试驱动开发，根据测试驱动开发的思想完成对应的测试文档即可。下面针对详细设计和编码阶段进行介绍。\n测试驱动开发的基本过程如下：\n1） 明确当前要完成的功能。可以记录成一个 TODO 列表。\n2） 快速完成针对此功能的测试用例编写。\n3） 测试代码编译不通过。\n4） 编写对应的功能代码。\n5） 测试通过。\n6） 对代码进行重构，并保证测试通过。\n7） 循环完成所有功能的开发。\n为了保证整个测试过程比较快捷、方便，通常可以使用测试框架组织所有的测试用例。一个免费的、优秀的测试框架是 Xunit 系列，几乎所有的语言都有对应的测试框架。\n开发过程中，通常把测试代码和功能代码分开存放，这里提供一个简单的测试框架使用例子，您可以通过它了解测试框架的使用。下面是文件列表。\n```\nproject/\t\t\t\t项目主目录\n\tproject/test\t\t\t测试项目主目录\n\tproject/test/testSeq.cpp\t\t测试seq_t 的测试文件，对其他功能文件的测试文件复制后修改即可\n\tproject/test/testSeq.h\n\tproject/test/Makefile\t\t\t测试项目的 Makefile\n\tproject/test/main.cpp\t\t\t测试项目的主文件，不需要修改\n\tproject/main.cpp\t\t           项目的主文件\n\tproject/seq_t.h\t\t\t功能代码，被测试文件\n\tproject/Makefile\t\t           项目的 Makefile\n```\n主要流程基本如此，但要让你的代码很容易的进行测试，全面又不繁琐的进行测试，还是有很多测试原则和技术需要考虑。\n## 4. 原则\n测试隔离。不同代码的测试应该相互隔离。对一块代码的测试只考虑此代码的测试，不要考虑其实现细节（比如它使用了其他类的边界条件）。\n一顶帽子。开发人员开发过程中要做不同的工作，比如：编写测试代码、开发功能代码、对代码重构等。做不同的事，承担不同的角色。开发人员完成对应的工作时应该保持注意力集中在当前工作上，而不要过多的考虑其他方面的细节，保证头上只有一顶帽子。避免考虑无关细节过多，无谓地增加复杂度。\n测试列表。需要测试的功能点很多。应该在任何阶段想添加功能需求问题时，把相关功能点加到测试列表中，然后继续手头工作。然后不断的完成对应的测试用例、功能代码、重构。一是避免疏漏，也避免干扰当前进行的工作。\n测试驱动。这个比较核心。完成某个功能，某个类，首先编写测试代码，考虑其如何使用、如何测试。然后在对其进行设计、编码。\n先写断言。测试代码编写时，应该首先编写对功能代码的判断用的断言语句，然后编写相应的辅助语句。\n可测试性。功能代码设计、开发时应该具有较强的可测试性。其实遵循比较好的设计原则的代码都具备较好的测试性。比如比较高的内聚性，尽量依赖于接口等。\n及时重构。无论是功能代码还是测试代码，对结构不合理，重复的代码等情况，在测试通过后，及时进行重构。关于重构，我会另撰文详细分析。\n小步前进。软件开发是个复杂性非常高的工作，开发过程中要考虑很多东西，包括代码的正确性、可扩展性、性能等等，很多问题都是因为复杂性太大导致的。极限编程提出了一个非常好的思路就是小步前进。把所有的规模大、复杂性高的工作，分解成小的任务来完成。对于一个类来说，一个功能一个功能的完成，如果太困难就再分解。每个功能的完成就走测试代码－功能代码－测试－重构的循环。通过分解降低整个系统开发的复杂性。这样的效果非常明显。几个小的功能代码完成后，大的功能代码几乎是不用调试就可以通过。一个个类方法的实现，很快就看到整个类很快就完成啦。本来感觉很多特性需要增加，很快就会看到没有几个啦。你甚至会为这个速度感到震惊。（我理解，是大幅度减少调试、出错的时间产生的这种速度感）\n## 5. 测试技术\n5.1. 测试范围、粒度\n对哪些功能进行测试？会不会太繁琐？什么时候可以停止测试？这些问题比较常见。按大师 Kent Benk 的话，对那些你认为应该测试的代码进行测试。就是说，要相信自己的感觉，自己的经验。那些重要的功能、核心的代码就应该重点测试。感到疲劳就应该停下来休息一下。感觉没有必要更详细的测试，就停止本轮测试。\n测试驱动开发强调测试并不应该是负担，而应该是帮助我们减轻工作量的方法。而对于何时停止编写测试用例，也是应该根据你的经验，功能复杂、核心功能的代码就应该编写更全面、细致的测试用例，否则测试流程即可。\n测试范围没有静态的标准，同时也应该可以随着时间改变。对于开始没有编写足够的测试的功能代码，随着bug的出现，根据bug补齐相关的测试用例即可。\n小步前进的原则，要求我们对大的功能块测试时，应该先分拆成更小的功能块进行测试，比如一个类A使用了类B、C，就应该编写到A使用B、C功能的测试代码前，完成对B、C的测试和开发。那么是不是每个小类或者小函数都应该测试哪？我认为没有必要。你应该运用你的经验，对那些可能出问题的地方重点测试，感觉不可能出问题的地方就等它真正出问题的时候再补测试吧。\n5.2. 怎么编写测试用例\n测试用例的编写就用上了传统的测试技术。\n操作过程尽量模拟正常使用的过程。\n全面的测试用例应该尽量做到分支覆盖，核心代码尽量做到路径覆盖。\n测试数据尽量包括：真实数据、边界数据。\n测试语句和测试数据应该尽量简单，容易理解。\n为了避免对其他代码过多的依赖，可以实现简单的桩函数或桩类（Mock Object）。\n如果内部状态非常复杂或者应该判断流程而不是状态，可以通过记录日志字符串的方式进行验证。\n## 6. Tips\n很多朋友有疑问，“测试代码的正确性如何保障？是写测试代码还是写测试文档？”这样是不是会陷入“鸡生蛋，蛋生鸡”的循环。其实是不会的。通常测试代码通常是非常简单的，通常围绕着某个情况的正确性判断的几个语句，如果太复杂，就应该继续分解啦。而传统的开发过程通常强调测试文档。但随着开发节奏的加快，用户需求的不断变化，维护高层（需求、概要设计）的测试文档可以，更低层的测试文档的成本的确太大了。而且可实时验证功能正确性的测试代码就是对代码最好的文档。\n软件开发过程中，除了遵守上面提到的测试驱动开发的几个原则外，一个需要注意的问题就是，谨防过度设计。编写功能代码时应该关注于完成当前功能点，通过测试，使用最简单、直接的方式来编码。过多的考虑后期的扩展，其他功能的添加，无疑增加了过多的复杂性，容易产生问题。应该等到要添加这些特性时在进行详细的测试驱动开发。到时候，有整套测试用例做基础，通过不断重构很容易添加相关特性。\n","source":"_posts/测试驱动开发.md","raw":"---\ntitle: 测试驱动开发\ndate: 2017-04-10 15:17:21\ntags:\n---\n## 背景\n一个高效的软件开发过程对软件开发人员来说是至关重要的，决定着开发是痛苦的挣扎，还是不断进步的喜悦。国人对软件蓝领的不屑，对繁琐冗长的传统开发过程的不耐，使大多数开发人员无所适从。最近兴起的一些软件开发过程相关的技术，提供一些比较高效、实用的软件过程开发方法。其中比较基础、关键的一个技术就是测试驱动开发（Test-Driven Development）。虽然TDD光大于极限编程，但测试驱动开发完全可以单独应用。下面就从开发人员使用的角度进行介绍，使开发人员用最少的代价尽快理解、掌握、应用这种技术。下面分优势，原理，过程，原则，测试技术，Tips等方面进行讨论。\n## 1. 优势\nTDD的基本思路就是通过测试来推动整个开发的进行。而测试驱动开发技术并不只是单纯的测试工作。\n需求向来就是软件开发过程中感觉最不好明确描述、易变的东西。这里说的需求不只是指用户的需求，还包括对代码的使用需求。很多开发人员最害怕的就是后期还要修改某个类或者函数的接口进行修改或者扩展，为什么会发生这样的事情就是因为这部分代码的使用需求没有很好的描述。测试驱动开发就是通过编写测试用例，先考虑代码的使用需求（包括功能、过程、接口等），而且这个描述是无二义的，可执行验证的。\n通过编写这部分代码的测试用例，对其功能的分解、使用过程、接口都进行了设计。而且这种从使用角度对代码的设计通常更符合后期开发的需求。可测试的要求，对代码的内聚性的提高和复用都非常有益。因此测试驱动开发也是一种代码设计的过程。\n开发人员通常对编写文档非常厌烦，但要使用、理解别人的代码时通常又希望能有文档进行指导。而测试驱动开发过程中产生的测试用例代码就是对代码的最好的解释。\n快乐工作的基础就是对自己有信心，对自己的工作成果有信心。当前很多开发人员却经常在担心：“代码是否正确？”“辛苦编写的代码还有没有严重bug？”“修改的新代码对其他部分有没有影响？”。这种担心甚至导致某些代码应该修改却不敢修改的地步。测试驱动开发提供的测试集就可以作为你信心的来源。\n当然测试驱动开发最重要的功能还在于保障代码的正确性，能够迅速发现、定位bug。而迅速发现、定位bug是很多开发人员的梦想。针对关键代码的测试集，以及不断完善的测试用例，为迅速发现、定位bug提供了条件。\n我的一段功能非常复杂的代码使用TDD开发完成，真实环境应用中只发现几个bug，而且很快被定位解决。您在应用后，也一定会为那种自信的开发过程，功能不断增加、完善的感觉，迅速发现、定位bug的能力所感染，喜欢这个技术的。\n那么是什么样的原理、方法提供上面说的这些好处哪？下面我们就看看TDD的原理。\n## 2. 原理\n测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。\n我们这里把这个技术的应用领域从代码编写扩展到整个开发过程。应该对整个开发过程的各个阶段进行测试驱动，首先思考如何对这个阶段进行测试、验证、考核，并编写相关的测试文档，然后开始下一步工作，最后再验证相关的工作。下图是一个比较流行的测试模型：V测试模型。\n【图 V测试模型】\n![Alt text](/images/v.jpg)\n在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都应该考虑相对应的测试工作，完成相关的测试用例的设计、测试方案、测试计划的编写。这里提到的开发阶段只是举例，根据实际的开发活动进行调整。相关的测试文档也不一定是非常详细复杂的文档，或者什么形式，但应该养成测试驱动的习惯。\n关于测试模型，还有X测试模型。这个测试模型，我认为，是对详细阶段和编码阶段进行建模，应该说更详细的描述了详细设计和编码阶段的开发行为。及针对某个功能进行对应的测试驱动开发。\n【图 X测试模型】\n![Alt text](/images/x.jpg)\n## 3. 过程\n软件开发其他阶段的测试驱动开发，根据测试驱动开发的思想完成对应的测试文档即可。下面针对详细设计和编码阶段进行介绍。\n测试驱动开发的基本过程如下：\n1） 明确当前要完成的功能。可以记录成一个 TODO 列表。\n2） 快速完成针对此功能的测试用例编写。\n3） 测试代码编译不通过。\n4） 编写对应的功能代码。\n5） 测试通过。\n6） 对代码进行重构，并保证测试通过。\n7） 循环完成所有功能的开发。\n为了保证整个测试过程比较快捷、方便，通常可以使用测试框架组织所有的测试用例。一个免费的、优秀的测试框架是 Xunit 系列，几乎所有的语言都有对应的测试框架。\n开发过程中，通常把测试代码和功能代码分开存放，这里提供一个简单的测试框架使用例子，您可以通过它了解测试框架的使用。下面是文件列表。\n```\nproject/\t\t\t\t项目主目录\n\tproject/test\t\t\t测试项目主目录\n\tproject/test/testSeq.cpp\t\t测试seq_t 的测试文件，对其他功能文件的测试文件复制后修改即可\n\tproject/test/testSeq.h\n\tproject/test/Makefile\t\t\t测试项目的 Makefile\n\tproject/test/main.cpp\t\t\t测试项目的主文件，不需要修改\n\tproject/main.cpp\t\t           项目的主文件\n\tproject/seq_t.h\t\t\t功能代码，被测试文件\n\tproject/Makefile\t\t           项目的 Makefile\n```\n主要流程基本如此，但要让你的代码很容易的进行测试，全面又不繁琐的进行测试，还是有很多测试原则和技术需要考虑。\n## 4. 原则\n测试隔离。不同代码的测试应该相互隔离。对一块代码的测试只考虑此代码的测试，不要考虑其实现细节（比如它使用了其他类的边界条件）。\n一顶帽子。开发人员开发过程中要做不同的工作，比如：编写测试代码、开发功能代码、对代码重构等。做不同的事，承担不同的角色。开发人员完成对应的工作时应该保持注意力集中在当前工作上，而不要过多的考虑其他方面的细节，保证头上只有一顶帽子。避免考虑无关细节过多，无谓地增加复杂度。\n测试列表。需要测试的功能点很多。应该在任何阶段想添加功能需求问题时，把相关功能点加到测试列表中，然后继续手头工作。然后不断的完成对应的测试用例、功能代码、重构。一是避免疏漏，也避免干扰当前进行的工作。\n测试驱动。这个比较核心。完成某个功能，某个类，首先编写测试代码，考虑其如何使用、如何测试。然后在对其进行设计、编码。\n先写断言。测试代码编写时，应该首先编写对功能代码的判断用的断言语句，然后编写相应的辅助语句。\n可测试性。功能代码设计、开发时应该具有较强的可测试性。其实遵循比较好的设计原则的代码都具备较好的测试性。比如比较高的内聚性，尽量依赖于接口等。\n及时重构。无论是功能代码还是测试代码，对结构不合理，重复的代码等情况，在测试通过后，及时进行重构。关于重构，我会另撰文详细分析。\n小步前进。软件开发是个复杂性非常高的工作，开发过程中要考虑很多东西，包括代码的正确性、可扩展性、性能等等，很多问题都是因为复杂性太大导致的。极限编程提出了一个非常好的思路就是小步前进。把所有的规模大、复杂性高的工作，分解成小的任务来完成。对于一个类来说，一个功能一个功能的完成，如果太困难就再分解。每个功能的完成就走测试代码－功能代码－测试－重构的循环。通过分解降低整个系统开发的复杂性。这样的效果非常明显。几个小的功能代码完成后，大的功能代码几乎是不用调试就可以通过。一个个类方法的实现，很快就看到整个类很快就完成啦。本来感觉很多特性需要增加，很快就会看到没有几个啦。你甚至会为这个速度感到震惊。（我理解，是大幅度减少调试、出错的时间产生的这种速度感）\n## 5. 测试技术\n5.1. 测试范围、粒度\n对哪些功能进行测试？会不会太繁琐？什么时候可以停止测试？这些问题比较常见。按大师 Kent Benk 的话，对那些你认为应该测试的代码进行测试。就是说，要相信自己的感觉，自己的经验。那些重要的功能、核心的代码就应该重点测试。感到疲劳就应该停下来休息一下。感觉没有必要更详细的测试，就停止本轮测试。\n测试驱动开发强调测试并不应该是负担，而应该是帮助我们减轻工作量的方法。而对于何时停止编写测试用例，也是应该根据你的经验，功能复杂、核心功能的代码就应该编写更全面、细致的测试用例，否则测试流程即可。\n测试范围没有静态的标准，同时也应该可以随着时间改变。对于开始没有编写足够的测试的功能代码，随着bug的出现，根据bug补齐相关的测试用例即可。\n小步前进的原则，要求我们对大的功能块测试时，应该先分拆成更小的功能块进行测试，比如一个类A使用了类B、C，就应该编写到A使用B、C功能的测试代码前，完成对B、C的测试和开发。那么是不是每个小类或者小函数都应该测试哪？我认为没有必要。你应该运用你的经验，对那些可能出问题的地方重点测试，感觉不可能出问题的地方就等它真正出问题的时候再补测试吧。\n5.2. 怎么编写测试用例\n测试用例的编写就用上了传统的测试技术。\n操作过程尽量模拟正常使用的过程。\n全面的测试用例应该尽量做到分支覆盖，核心代码尽量做到路径覆盖。\n测试数据尽量包括：真实数据、边界数据。\n测试语句和测试数据应该尽量简单，容易理解。\n为了避免对其他代码过多的依赖，可以实现简单的桩函数或桩类（Mock Object）。\n如果内部状态非常复杂或者应该判断流程而不是状态，可以通过记录日志字符串的方式进行验证。\n## 6. Tips\n很多朋友有疑问，“测试代码的正确性如何保障？是写测试代码还是写测试文档？”这样是不是会陷入“鸡生蛋，蛋生鸡”的循环。其实是不会的。通常测试代码通常是非常简单的，通常围绕着某个情况的正确性判断的几个语句，如果太复杂，就应该继续分解啦。而传统的开发过程通常强调测试文档。但随着开发节奏的加快，用户需求的不断变化，维护高层（需求、概要设计）的测试文档可以，更低层的测试文档的成本的确太大了。而且可实时验证功能正确性的测试代码就是对代码最好的文档。\n软件开发过程中，除了遵守上面提到的测试驱动开发的几个原则外，一个需要注意的问题就是，谨防过度设计。编写功能代码时应该关注于完成当前功能点，通过测试，使用最简单、直接的方式来编码。过多的考虑后期的扩展，其他功能的添加，无疑增加了过多的复杂性，容易产生问题。应该等到要添加这些特性时在进行详细的测试驱动开发。到时候，有整套测试用例做基础，通过不断重构很容易添加相关特性。\n","slug":"测试驱动开发","published":1,"updated":"2017-04-10T07:23:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4nb00086lu2ab3hhsd9","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一个高效的软件开发过程对软件开发人员来说是至关重要的，决定着开发是痛苦的挣扎，还是不断进步的喜悦。国人对软件蓝领的不屑，对繁琐冗长的传统开发过程的不耐，使大多数开发人员无所适从。最近兴起的一些软件开发过程相关的技术，提供一些比较高效、实用的软件过程开发方法。其中比较基础、关键的一个技术就是测试驱动开发（Test-Driven Development）。虽然TDD光大于极限编程，但测试驱动开发完全可以单独应用。下面就从开发人员使用的角度进行介绍，使开发人员用最少的代价尽快理解、掌握、应用这种技术。下面分优势，原理，过程，原则，测试技术，Tips等方面进行讨论。</p>\n<h2 id=\"1-优势\"><a href=\"#1-优势\" class=\"headerlink\" title=\"1. 优势\"></a>1. 优势</h2><p>TDD的基本思路就是通过测试来推动整个开发的进行。而测试驱动开发技术并不只是单纯的测试工作。<br>需求向来就是软件开发过程中感觉最不好明确描述、易变的东西。这里说的需求不只是指用户的需求，还包括对代码的使用需求。很多开发人员最害怕的就是后期还要修改某个类或者函数的接口进行修改或者扩展，为什么会发生这样的事情就是因为这部分代码的使用需求没有很好的描述。测试驱动开发就是通过编写测试用例，先考虑代码的使用需求（包括功能、过程、接口等），而且这个描述是无二义的，可执行验证的。<br>通过编写这部分代码的测试用例，对其功能的分解、使用过程、接口都进行了设计。而且这种从使用角度对代码的设计通常更符合后期开发的需求。可测试的要求，对代码的内聚性的提高和复用都非常有益。因此测试驱动开发也是一种代码设计的过程。<br>开发人员通常对编写文档非常厌烦，但要使用、理解别人的代码时通常又希望能有文档进行指导。而测试驱动开发过程中产生的测试用例代码就是对代码的最好的解释。<br>快乐工作的基础就是对自己有信心，对自己的工作成果有信心。当前很多开发人员却经常在担心：“代码是否正确？”“辛苦编写的代码还有没有严重bug？”“修改的新代码对其他部分有没有影响？”。这种担心甚至导致某些代码应该修改却不敢修改的地步。测试驱动开发提供的测试集就可以作为你信心的来源。<br>当然测试驱动开发最重要的功能还在于保障代码的正确性，能够迅速发现、定位bug。而迅速发现、定位bug是很多开发人员的梦想。针对关键代码的测试集，以及不断完善的测试用例，为迅速发现、定位bug提供了条件。<br>我的一段功能非常复杂的代码使用TDD开发完成，真实环境应用中只发现几个bug，而且很快被定位解决。您在应用后，也一定会为那种自信的开发过程，功能不断增加、完善的感觉，迅速发现、定位bug的能力所感染，喜欢这个技术的。<br>那么是什么样的原理、方法提供上面说的这些好处哪？下面我们就看看TDD的原理。</p>\n<h2 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2. 原理\"></a>2. 原理</h2><p>测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。<br>我们这里把这个技术的应用领域从代码编写扩展到整个开发过程。应该对整个开发过程的各个阶段进行测试驱动，首先思考如何对这个阶段进行测试、验证、考核，并编写相关的测试文档，然后开始下一步工作，最后再验证相关的工作。下图是一个比较流行的测试模型：V测试模型。<br>【图 V测试模型】<br><img src=\"/images/v.jpg\" alt=\"Alt text\"><br>在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都应该考虑相对应的测试工作，完成相关的测试用例的设计、测试方案、测试计划的编写。这里提到的开发阶段只是举例，根据实际的开发活动进行调整。相关的测试文档也不一定是非常详细复杂的文档，或者什么形式，但应该养成测试驱动的习惯。<br>关于测试模型，还有X测试模型。这个测试模型，我认为，是对详细阶段和编码阶段进行建模，应该说更详细的描述了详细设计和编码阶段的开发行为。及针对某个功能进行对应的测试驱动开发。<br>【图 X测试模型】<br><img src=\"/images/x.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3. 过程\"></a>3. 过程</h2><p>软件开发其他阶段的测试驱动开发，根据测试驱动开发的思想完成对应的测试文档即可。下面针对详细设计和编码阶段进行介绍。<br>测试驱动开发的基本过程如下：<br>1） 明确当前要完成的功能。可以记录成一个 TODO 列表。<br>2） 快速完成针对此功能的测试用例编写。<br>3） 测试代码编译不通过。<br>4） 编写对应的功能代码。<br>5） 测试通过。<br>6） 对代码进行重构，并保证测试通过。<br>7） 循环完成所有功能的开发。<br>为了保证整个测试过程比较快捷、方便，通常可以使用测试框架组织所有的测试用例。一个免费的、优秀的测试框架是 Xunit 系列，几乎所有的语言都有对应的测试框架。<br>开发过程中，通常把测试代码和功能代码分开存放，这里提供一个简单的测试框架使用例子，您可以通过它了解测试框架的使用。下面是文件列表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">project/\t\t\t\t项目主目录</div><div class=\"line\">\tproject/test\t\t\t测试项目主目录</div><div class=\"line\">\tproject/test/testSeq.cpp\t\t测试seq_t 的测试文件，对其他功能文件的测试文件复制后修改即可</div><div class=\"line\">\tproject/test/testSeq.h</div><div class=\"line\">\tproject/test/Makefile\t\t\t测试项目的 Makefile</div><div class=\"line\">\tproject/test/main.cpp\t\t\t测试项目的主文件，不需要修改</div><div class=\"line\">\tproject/main.cpp\t\t           项目的主文件</div><div class=\"line\">\tproject/seq_t.h\t\t\t功能代码，被测试文件</div><div class=\"line\">\tproject/Makefile\t\t           项目的 Makefile</div></pre></td></tr></table></figure></p>\n<p>主要流程基本如此，但要让你的代码很容易的进行测试，全面又不繁琐的进行测试，还是有很多测试原则和技术需要考虑。</p>\n<h2 id=\"4-原则\"><a href=\"#4-原则\" class=\"headerlink\" title=\"4. 原则\"></a>4. 原则</h2><p>测试隔离。不同代码的测试应该相互隔离。对一块代码的测试只考虑此代码的测试，不要考虑其实现细节（比如它使用了其他类的边界条件）。<br>一顶帽子。开发人员开发过程中要做不同的工作，比如：编写测试代码、开发功能代码、对代码重构等。做不同的事，承担不同的角色。开发人员完成对应的工作时应该保持注意力集中在当前工作上，而不要过多的考虑其他方面的细节，保证头上只有一顶帽子。避免考虑无关细节过多，无谓地增加复杂度。<br>测试列表。需要测试的功能点很多。应该在任何阶段想添加功能需求问题时，把相关功能点加到测试列表中，然后继续手头工作。然后不断的完成对应的测试用例、功能代码、重构。一是避免疏漏，也避免干扰当前进行的工作。<br>测试驱动。这个比较核心。完成某个功能，某个类，首先编写测试代码，考虑其如何使用、如何测试。然后在对其进行设计、编码。<br>先写断言。测试代码编写时，应该首先编写对功能代码的判断用的断言语句，然后编写相应的辅助语句。<br>可测试性。功能代码设计、开发时应该具有较强的可测试性。其实遵循比较好的设计原则的代码都具备较好的测试性。比如比较高的内聚性，尽量依赖于接口等。<br>及时重构。无论是功能代码还是测试代码，对结构不合理，重复的代码等情况，在测试通过后，及时进行重构。关于重构，我会另撰文详细分析。<br>小步前进。软件开发是个复杂性非常高的工作，开发过程中要考虑很多东西，包括代码的正确性、可扩展性、性能等等，很多问题都是因为复杂性太大导致的。极限编程提出了一个非常好的思路就是小步前进。把所有的规模大、复杂性高的工作，分解成小的任务来完成。对于一个类来说，一个功能一个功能的完成，如果太困难就再分解。每个功能的完成就走测试代码－功能代码－测试－重构的循环。通过分解降低整个系统开发的复杂性。这样的效果非常明显。几个小的功能代码完成后，大的功能代码几乎是不用调试就可以通过。一个个类方法的实现，很快就看到整个类很快就完成啦。本来感觉很多特性需要增加，很快就会看到没有几个啦。你甚至会为这个速度感到震惊。（我理解，是大幅度减少调试、出错的时间产生的这种速度感）</p>\n<h2 id=\"5-测试技术\"><a href=\"#5-测试技术\" class=\"headerlink\" title=\"5. 测试技术\"></a>5. 测试技术</h2><p>5.1. 测试范围、粒度<br>对哪些功能进行测试？会不会太繁琐？什么时候可以停止测试？这些问题比较常见。按大师 Kent Benk 的话，对那些你认为应该测试的代码进行测试。就是说，要相信自己的感觉，自己的经验。那些重要的功能、核心的代码就应该重点测试。感到疲劳就应该停下来休息一下。感觉没有必要更详细的测试，就停止本轮测试。<br>测试驱动开发强调测试并不应该是负担，而应该是帮助我们减轻工作量的方法。而对于何时停止编写测试用例，也是应该根据你的经验，功能复杂、核心功能的代码就应该编写更全面、细致的测试用例，否则测试流程即可。<br>测试范围没有静态的标准，同时也应该可以随着时间改变。对于开始没有编写足够的测试的功能代码，随着bug的出现，根据bug补齐相关的测试用例即可。<br>小步前进的原则，要求我们对大的功能块测试时，应该先分拆成更小的功能块进行测试，比如一个类A使用了类B、C，就应该编写到A使用B、C功能的测试代码前，完成对B、C的测试和开发。那么是不是每个小类或者小函数都应该测试哪？我认为没有必要。你应该运用你的经验，对那些可能出问题的地方重点测试，感觉不可能出问题的地方就等它真正出问题的时候再补测试吧。<br>5.2. 怎么编写测试用例<br>测试用例的编写就用上了传统的测试技术。<br>操作过程尽量模拟正常使用的过程。<br>全面的测试用例应该尽量做到分支覆盖，核心代码尽量做到路径覆盖。<br>测试数据尽量包括：真实数据、边界数据。<br>测试语句和测试数据应该尽量简单，容易理解。<br>为了避免对其他代码过多的依赖，可以实现简单的桩函数或桩类（Mock Object）。<br>如果内部状态非常复杂或者应该判断流程而不是状态，可以通过记录日志字符串的方式进行验证。</p>\n<h2 id=\"6-Tips\"><a href=\"#6-Tips\" class=\"headerlink\" title=\"6. Tips\"></a>6. Tips</h2><p>很多朋友有疑问，“测试代码的正确性如何保障？是写测试代码还是写测试文档？”这样是不是会陷入“鸡生蛋，蛋生鸡”的循环。其实是不会的。通常测试代码通常是非常简单的，通常围绕着某个情况的正确性判断的几个语句，如果太复杂，就应该继续分解啦。而传统的开发过程通常强调测试文档。但随着开发节奏的加快，用户需求的不断变化，维护高层（需求、概要设计）的测试文档可以，更低层的测试文档的成本的确太大了。而且可实时验证功能正确性的测试代码就是对代码最好的文档。<br>软件开发过程中，除了遵守上面提到的测试驱动开发的几个原则外，一个需要注意的问题就是，谨防过度设计。编写功能代码时应该关注于完成当前功能点，通过测试，使用最简单、直接的方式来编码。过多的考虑后期的扩展，其他功能的添加，无疑增加了过多的复杂性，容易产生问题。应该等到要添加这些特性时在进行详细的测试驱动开发。到时候，有整套测试用例做基础，通过不断重构很容易添加相关特性。</p>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一个高效的软件开发过程对软件开发人员来说是至关重要的，决定着开发是痛苦的挣扎，还是不断进步的喜悦。国人对软件蓝领的不屑，对繁琐冗长的传统开发过程的不耐，使大多数开发人员无所适从。最近兴起的一些软件开发过程相关的技术，提供一些比较高效、实用的软件过程开发方法。其中比较基础、关键的一个技术就是测试驱动开发（Test-Driven Development）。虽然TDD光大于极限编程，但测试驱动开发完全可以单独应用。下面就从开发人员使用的角度进行介绍，使开发人员用最少的代价尽快理解、掌握、应用这种技术。下面分优势，原理，过程，原则，测试技术，Tips等方面进行讨论。</p>\n<h2 id=\"1-优势\"><a href=\"#1-优势\" class=\"headerlink\" title=\"1. 优势\"></a>1. 优势</h2><p>TDD的基本思路就是通过测试来推动整个开发的进行。而测试驱动开发技术并不只是单纯的测试工作。<br>需求向来就是软件开发过程中感觉最不好明确描述、易变的东西。这里说的需求不只是指用户的需求，还包括对代码的使用需求。很多开发人员最害怕的就是后期还要修改某个类或者函数的接口进行修改或者扩展，为什么会发生这样的事情就是因为这部分代码的使用需求没有很好的描述。测试驱动开发就是通过编写测试用例，先考虑代码的使用需求（包括功能、过程、接口等），而且这个描述是无二义的，可执行验证的。<br>通过编写这部分代码的测试用例，对其功能的分解、使用过程、接口都进行了设计。而且这种从使用角度对代码的设计通常更符合后期开发的需求。可测试的要求，对代码的内聚性的提高和复用都非常有益。因此测试驱动开发也是一种代码设计的过程。<br>开发人员通常对编写文档非常厌烦，但要使用、理解别人的代码时通常又希望能有文档进行指导。而测试驱动开发过程中产生的测试用例代码就是对代码的最好的解释。<br>快乐工作的基础就是对自己有信心，对自己的工作成果有信心。当前很多开发人员却经常在担心：“代码是否正确？”“辛苦编写的代码还有没有严重bug？”“修改的新代码对其他部分有没有影响？”。这种担心甚至导致某些代码应该修改却不敢修改的地步。测试驱动开发提供的测试集就可以作为你信心的来源。<br>当然测试驱动开发最重要的功能还在于保障代码的正确性，能够迅速发现、定位bug。而迅速发现、定位bug是很多开发人员的梦想。针对关键代码的测试集，以及不断完善的测试用例，为迅速发现、定位bug提供了条件。<br>我的一段功能非常复杂的代码使用TDD开发完成，真实环境应用中只发现几个bug，而且很快被定位解决。您在应用后，也一定会为那种自信的开发过程，功能不断增加、完善的感觉，迅速发现、定位bug的能力所感染，喜欢这个技术的。<br>那么是什么样的原理、方法提供上面说的这些好处哪？下面我们就看看TDD的原理。</p>\n<h2 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2. 原理\"></a>2. 原理</h2><p>测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。<br>我们这里把这个技术的应用领域从代码编写扩展到整个开发过程。应该对整个开发过程的各个阶段进行测试驱动，首先思考如何对这个阶段进行测试、验证、考核，并编写相关的测试文档，然后开始下一步工作，最后再验证相关的工作。下图是一个比较流行的测试模型：V测试模型。<br>【图 V测试模型】<br><img src=\"/images/v.jpg\" alt=\"Alt text\"><br>在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都应该考虑相对应的测试工作，完成相关的测试用例的设计、测试方案、测试计划的编写。这里提到的开发阶段只是举例，根据实际的开发活动进行调整。相关的测试文档也不一定是非常详细复杂的文档，或者什么形式，但应该养成测试驱动的习惯。<br>关于测试模型，还有X测试模型。这个测试模型，我认为，是对详细阶段和编码阶段进行建模，应该说更详细的描述了详细设计和编码阶段的开发行为。及针对某个功能进行对应的测试驱动开发。<br>【图 X测试模型】<br><img src=\"/images/x.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3. 过程\"></a>3. 过程</h2><p>软件开发其他阶段的测试驱动开发，根据测试驱动开发的思想完成对应的测试文档即可。下面针对详细设计和编码阶段进行介绍。<br>测试驱动开发的基本过程如下：<br>1） 明确当前要完成的功能。可以记录成一个 TODO 列表。<br>2） 快速完成针对此功能的测试用例编写。<br>3） 测试代码编译不通过。<br>4） 编写对应的功能代码。<br>5） 测试通过。<br>6） 对代码进行重构，并保证测试通过。<br>7） 循环完成所有功能的开发。<br>为了保证整个测试过程比较快捷、方便，通常可以使用测试框架组织所有的测试用例。一个免费的、优秀的测试框架是 Xunit 系列，几乎所有的语言都有对应的测试框架。<br>开发过程中，通常把测试代码和功能代码分开存放，这里提供一个简单的测试框架使用例子，您可以通过它了解测试框架的使用。下面是文件列表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">project/\t\t\t\t项目主目录</div><div class=\"line\">\tproject/test\t\t\t测试项目主目录</div><div class=\"line\">\tproject/test/testSeq.cpp\t\t测试seq_t 的测试文件，对其他功能文件的测试文件复制后修改即可</div><div class=\"line\">\tproject/test/testSeq.h</div><div class=\"line\">\tproject/test/Makefile\t\t\t测试项目的 Makefile</div><div class=\"line\">\tproject/test/main.cpp\t\t\t测试项目的主文件，不需要修改</div><div class=\"line\">\tproject/main.cpp\t\t           项目的主文件</div><div class=\"line\">\tproject/seq_t.h\t\t\t功能代码，被测试文件</div><div class=\"line\">\tproject/Makefile\t\t           项目的 Makefile</div></pre></td></tr></table></figure></p>\n<p>主要流程基本如此，但要让你的代码很容易的进行测试，全面又不繁琐的进行测试，还是有很多测试原则和技术需要考虑。</p>\n<h2 id=\"4-原则\"><a href=\"#4-原则\" class=\"headerlink\" title=\"4. 原则\"></a>4. 原则</h2><p>测试隔离。不同代码的测试应该相互隔离。对一块代码的测试只考虑此代码的测试，不要考虑其实现细节（比如它使用了其他类的边界条件）。<br>一顶帽子。开发人员开发过程中要做不同的工作，比如：编写测试代码、开发功能代码、对代码重构等。做不同的事，承担不同的角色。开发人员完成对应的工作时应该保持注意力集中在当前工作上，而不要过多的考虑其他方面的细节，保证头上只有一顶帽子。避免考虑无关细节过多，无谓地增加复杂度。<br>测试列表。需要测试的功能点很多。应该在任何阶段想添加功能需求问题时，把相关功能点加到测试列表中，然后继续手头工作。然后不断的完成对应的测试用例、功能代码、重构。一是避免疏漏，也避免干扰当前进行的工作。<br>测试驱动。这个比较核心。完成某个功能，某个类，首先编写测试代码，考虑其如何使用、如何测试。然后在对其进行设计、编码。<br>先写断言。测试代码编写时，应该首先编写对功能代码的判断用的断言语句，然后编写相应的辅助语句。<br>可测试性。功能代码设计、开发时应该具有较强的可测试性。其实遵循比较好的设计原则的代码都具备较好的测试性。比如比较高的内聚性，尽量依赖于接口等。<br>及时重构。无论是功能代码还是测试代码，对结构不合理，重复的代码等情况，在测试通过后，及时进行重构。关于重构，我会另撰文详细分析。<br>小步前进。软件开发是个复杂性非常高的工作，开发过程中要考虑很多东西，包括代码的正确性、可扩展性、性能等等，很多问题都是因为复杂性太大导致的。极限编程提出了一个非常好的思路就是小步前进。把所有的规模大、复杂性高的工作，分解成小的任务来完成。对于一个类来说，一个功能一个功能的完成，如果太困难就再分解。每个功能的完成就走测试代码－功能代码－测试－重构的循环。通过分解降低整个系统开发的复杂性。这样的效果非常明显。几个小的功能代码完成后，大的功能代码几乎是不用调试就可以通过。一个个类方法的实现，很快就看到整个类很快就完成啦。本来感觉很多特性需要增加，很快就会看到没有几个啦。你甚至会为这个速度感到震惊。（我理解，是大幅度减少调试、出错的时间产生的这种速度感）</p>\n<h2 id=\"5-测试技术\"><a href=\"#5-测试技术\" class=\"headerlink\" title=\"5. 测试技术\"></a>5. 测试技术</h2><p>5.1. 测试范围、粒度<br>对哪些功能进行测试？会不会太繁琐？什么时候可以停止测试？这些问题比较常见。按大师 Kent Benk 的话，对那些你认为应该测试的代码进行测试。就是说，要相信自己的感觉，自己的经验。那些重要的功能、核心的代码就应该重点测试。感到疲劳就应该停下来休息一下。感觉没有必要更详细的测试，就停止本轮测试。<br>测试驱动开发强调测试并不应该是负担，而应该是帮助我们减轻工作量的方法。而对于何时停止编写测试用例，也是应该根据你的经验，功能复杂、核心功能的代码就应该编写更全面、细致的测试用例，否则测试流程即可。<br>测试范围没有静态的标准，同时也应该可以随着时间改变。对于开始没有编写足够的测试的功能代码，随着bug的出现，根据bug补齐相关的测试用例即可。<br>小步前进的原则，要求我们对大的功能块测试时，应该先分拆成更小的功能块进行测试，比如一个类A使用了类B、C，就应该编写到A使用B、C功能的测试代码前，完成对B、C的测试和开发。那么是不是每个小类或者小函数都应该测试哪？我认为没有必要。你应该运用你的经验，对那些可能出问题的地方重点测试，感觉不可能出问题的地方就等它真正出问题的时候再补测试吧。<br>5.2. 怎么编写测试用例<br>测试用例的编写就用上了传统的测试技术。<br>操作过程尽量模拟正常使用的过程。<br>全面的测试用例应该尽量做到分支覆盖，核心代码尽量做到路径覆盖。<br>测试数据尽量包括：真实数据、边界数据。<br>测试语句和测试数据应该尽量简单，容易理解。<br>为了避免对其他代码过多的依赖，可以实现简单的桩函数或桩类（Mock Object）。<br>如果内部状态非常复杂或者应该判断流程而不是状态，可以通过记录日志字符串的方式进行验证。</p>\n<h2 id=\"6-Tips\"><a href=\"#6-Tips\" class=\"headerlink\" title=\"6. Tips\"></a>6. Tips</h2><p>很多朋友有疑问，“测试代码的正确性如何保障？是写测试代码还是写测试文档？”这样是不是会陷入“鸡生蛋，蛋生鸡”的循环。其实是不会的。通常测试代码通常是非常简单的，通常围绕着某个情况的正确性判断的几个语句，如果太复杂，就应该继续分解啦。而传统的开发过程通常强调测试文档。但随着开发节奏的加快，用户需求的不断变化，维护高层（需求、概要设计）的测试文档可以，更低层的测试文档的成本的确太大了。而且可实时验证功能正确性的测试代码就是对代码最好的文档。<br>软件开发过程中，除了遵守上面提到的测试驱动开发的几个原则外，一个需要注意的问题就是，谨防过度设计。编写功能代码时应该关注于完成当前功能点，通过测试，使用最简单、直接的方式来编码。过多的考虑后期的扩展，其他功能的添加，无疑增加了过多的复杂性，容易产生问题。应该等到要添加这些特性时在进行详细的测试驱动开发。到时候，有整套测试用例做基础，通过不断重构很容易添加相关特性。</p>\n"},{"title":"读构建之法体会","date":"2017-03-19T08:22:18.000Z","_content":"## 构建之法简介\n  软件工程牵涉的范围很广, 同时也是一般院校的同学反映比较空洞乏味的课程。 但是 软件工程的技术对于投身IT 产业的学生来说是非常重要的。作者邹欣有长达20年的一线软件开发经验，他利用业余时间在数所高校进行了长达6年的软件工程教学实践，总结出了在16周的时间内让 同学们通过 “做中学 (Learning By Doing)” 掌握实用的软件工程技术的教学计划，并得到高校师生的积极反馈。在此基础上，作者对软件工程的各个知识点和技能要求进行了系统性整理，形成教材。\n  我将逐章的概述内容及我读完之后的感受\n## 第1章概论\n首先一上来提到了一个公式：软件=程序+软件工程\n之后提出了三个问题或者叫做三个现象吧。之后讲了一个例子：从一个出30道加减法的题扩展到一个具有各种功能而且庞大的web应用。在这个例子中就会设计一些算法和数据结构，我想应该没有人会写这样的库给开发者用，所以需要自己去写一些算法和数据结构。后面引出了，程序的运行环境、源代码管理、软件的质量保证的过程是软件测试、绣球分析、软件维护、软件的生命周期和用户体验等概念。上述皆为软件开发活动行管的内容。\n之后提到了软件团队赚钱的方式。再从广义上的软件工程也包括用户体验、用户界面等。从而推出一个公式：软件＝程序＋软件工程。又从中扩展到软件企业＝软件＋商业模式。\n用折纸飞机的玩具阶段、用氢气球飞上天的业余爱好阶段、莱特兄弟制造飞机的探索阶段、现在的航空业的成熟的产业阶段类比软件开发的不同阶段：\n![Alt text](/images/soft classify.png)\n软件工程是把系统的、有序的、可量化的放大应用到软件的开发、运营和维护上的过程。介绍了软件工程包含了哪些领域以及与软件工程相关的一些领域。简单介绍了一下软件开发流程和一些工具。\n软件的特殊性共总结了五点内容：\n- **复杂性**\n- **不可见性**\n- **易变性**\n- **服从性**\n- **非连续性**\n之后对软件工程和计算机科学之间的关系、侧重点和领域等做出比较。\n最后谈了谈bug的来历。\n\n## 总结\n在我看来就是造轮子和用轮子，作为java程序员想快速做出一个网站，不算是难事，即便用上SSM(Spring MVC,Spring,Mybatis)再加上基于RESTFul API的Swagger实现前后端分离的契约。还是加上缓存redis等技术对于数据结构和算法运用的不是很多基本上都是围绕着对数据库的增、删、改、查，这几个操作。肯定会有这个阶段，我们只需要会用轮子，还需要关注轮子是怎么造的嘛？在我看来数据结构和算法是一个编程员的基本功。所以基本功往往不是一时半会可以出效果的，如果不在乎这些基本功，也许一年两年在工作中不会体现，不过在这个领域呆的时间越久我确信，没有这些基本功作为保证，以后会遇见各种各样的瓶颈。\n","source":"_posts/读构建之法体会.md","raw":"---\ntitle: 读构建之法体会\ndate: 2017-03-19 16:22:18\ntags:\n---\n## 构建之法简介\n  软件工程牵涉的范围很广, 同时也是一般院校的同学反映比较空洞乏味的课程。 但是 软件工程的技术对于投身IT 产业的学生来说是非常重要的。作者邹欣有长达20年的一线软件开发经验，他利用业余时间在数所高校进行了长达6年的软件工程教学实践，总结出了在16周的时间内让 同学们通过 “做中学 (Learning By Doing)” 掌握实用的软件工程技术的教学计划，并得到高校师生的积极反馈。在此基础上，作者对软件工程的各个知识点和技能要求进行了系统性整理，形成教材。\n  我将逐章的概述内容及我读完之后的感受\n## 第1章概论\n首先一上来提到了一个公式：软件=程序+软件工程\n之后提出了三个问题或者叫做三个现象吧。之后讲了一个例子：从一个出30道加减法的题扩展到一个具有各种功能而且庞大的web应用。在这个例子中就会设计一些算法和数据结构，我想应该没有人会写这样的库给开发者用，所以需要自己去写一些算法和数据结构。后面引出了，程序的运行环境、源代码管理、软件的质量保证的过程是软件测试、绣球分析、软件维护、软件的生命周期和用户体验等概念。上述皆为软件开发活动行管的内容。\n之后提到了软件团队赚钱的方式。再从广义上的软件工程也包括用户体验、用户界面等。从而推出一个公式：软件＝程序＋软件工程。又从中扩展到软件企业＝软件＋商业模式。\n用折纸飞机的玩具阶段、用氢气球飞上天的业余爱好阶段、莱特兄弟制造飞机的探索阶段、现在的航空业的成熟的产业阶段类比软件开发的不同阶段：\n![Alt text](/images/soft classify.png)\n软件工程是把系统的、有序的、可量化的放大应用到软件的开发、运营和维护上的过程。介绍了软件工程包含了哪些领域以及与软件工程相关的一些领域。简单介绍了一下软件开发流程和一些工具。\n软件的特殊性共总结了五点内容：\n- **复杂性**\n- **不可见性**\n- **易变性**\n- **服从性**\n- **非连续性**\n之后对软件工程和计算机科学之间的关系、侧重点和领域等做出比较。\n最后谈了谈bug的来历。\n\n## 总结\n在我看来就是造轮子和用轮子，作为java程序员想快速做出一个网站，不算是难事，即便用上SSM(Spring MVC,Spring,Mybatis)再加上基于RESTFul API的Swagger实现前后端分离的契约。还是加上缓存redis等技术对于数据结构和算法运用的不是很多基本上都是围绕着对数据库的增、删、改、查，这几个操作。肯定会有这个阶段，我们只需要会用轮子，还需要关注轮子是怎么造的嘛？在我看来数据结构和算法是一个编程员的基本功。所以基本功往往不是一时半会可以出效果的，如果不在乎这些基本功，也许一年两年在工作中不会体现，不过在这个领域呆的时间越久我确信，没有这些基本功作为保证，以后会遇见各种各样的瓶颈。\n","slug":"读构建之法体会","published":1,"updated":"2017-03-19T13:07:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4nc00096lu2zfsgd4gy","content":"<h2 id=\"构建之法简介\"><a href=\"#构建之法简介\" class=\"headerlink\" title=\"构建之法简介\"></a>构建之法简介</h2><p>  软件工程牵涉的范围很广, 同时也是一般院校的同学反映比较空洞乏味的课程。 但是 软件工程的技术对于投身IT 产业的学生来说是非常重要的。作者邹欣有长达20年的一线软件开发经验，他利用业余时间在数所高校进行了长达6年的软件工程教学实践，总结出了在16周的时间内让 同学们通过 “做中学 (Learning By Doing)” 掌握实用的软件工程技术的教学计划，并得到高校师生的积极反馈。在此基础上，作者对软件工程的各个知识点和技能要求进行了系统性整理，形成教材。<br>  我将逐章的概述内容及我读完之后的感受</p>\n<h2 id=\"第1章概论\"><a href=\"#第1章概论\" class=\"headerlink\" title=\"第1章概论\"></a>第1章概论</h2><p>首先一上来提到了一个公式：软件=程序+软件工程<br>之后提出了三个问题或者叫做三个现象吧。之后讲了一个例子：从一个出30道加减法的题扩展到一个具有各种功能而且庞大的web应用。在这个例子中就会设计一些算法和数据结构，我想应该没有人会写这样的库给开发者用，所以需要自己去写一些算法和数据结构。后面引出了，程序的运行环境、源代码管理、软件的质量保证的过程是软件测试、绣球分析、软件维护、软件的生命周期和用户体验等概念。上述皆为软件开发活动行管的内容。<br>之后提到了软件团队赚钱的方式。再从广义上的软件工程也包括用户体验、用户界面等。从而推出一个公式：软件＝程序＋软件工程。又从中扩展到软件企业＝软件＋商业模式。<br>用折纸飞机的玩具阶段、用氢气球飞上天的业余爱好阶段、莱特兄弟制造飞机的探索阶段、现在的航空业的成熟的产业阶段类比软件开发的不同阶段：<br><img src=\"/images/soft classify.png\" alt=\"Alt text\"><br>软件工程是把系统的、有序的、可量化的放大应用到软件的开发、运营和维护上的过程。介绍了软件工程包含了哪些领域以及与软件工程相关的一些领域。简单介绍了一下软件开发流程和一些工具。<br>软件的特殊性共总结了五点内容：</p>\n<ul>\n<li><strong>复杂性</strong></li>\n<li><strong>不可见性</strong></li>\n<li><strong>易变性</strong></li>\n<li><strong>服从性</strong></li>\n<li><strong>非连续性</strong><br>之后对软件工程和计算机科学之间的关系、侧重点和领域等做出比较。<br>最后谈了谈bug的来历。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在我看来就是造轮子和用轮子，作为java程序员想快速做出一个网站，不算是难事，即便用上SSM(Spring MVC,Spring,Mybatis)再加上基于RESTFul API的Swagger实现前后端分离的契约。还是加上缓存redis等技术对于数据结构和算法运用的不是很多基本上都是围绕着对数据库的增、删、改、查，这几个操作。肯定会有这个阶段，我们只需要会用轮子，还需要关注轮子是怎么造的嘛？在我看来数据结构和算法是一个编程员的基本功。所以基本功往往不是一时半会可以出效果的，如果不在乎这些基本功，也许一年两年在工作中不会体现，不过在这个领域呆的时间越久我确信，没有这些基本功作为保证，以后会遇见各种各样的瓶颈。</p>\n","excerpt":"","more":"<h2 id=\"构建之法简介\"><a href=\"#构建之法简介\" class=\"headerlink\" title=\"构建之法简介\"></a>构建之法简介</h2><p>  软件工程牵涉的范围很广, 同时也是一般院校的同学反映比较空洞乏味的课程。 但是 软件工程的技术对于投身IT 产业的学生来说是非常重要的。作者邹欣有长达20年的一线软件开发经验，他利用业余时间在数所高校进行了长达6年的软件工程教学实践，总结出了在16周的时间内让 同学们通过 “做中学 (Learning By Doing)” 掌握实用的软件工程技术的教学计划，并得到高校师生的积极反馈。在此基础上，作者对软件工程的各个知识点和技能要求进行了系统性整理，形成教材。<br>  我将逐章的概述内容及我读完之后的感受</p>\n<h2 id=\"第1章概论\"><a href=\"#第1章概论\" class=\"headerlink\" title=\"第1章概论\"></a>第1章概论</h2><p>首先一上来提到了一个公式：软件=程序+软件工程<br>之后提出了三个问题或者叫做三个现象吧。之后讲了一个例子：从一个出30道加减法的题扩展到一个具有各种功能而且庞大的web应用。在这个例子中就会设计一些算法和数据结构，我想应该没有人会写这样的库给开发者用，所以需要自己去写一些算法和数据结构。后面引出了，程序的运行环境、源代码管理、软件的质量保证的过程是软件测试、绣球分析、软件维护、软件的生命周期和用户体验等概念。上述皆为软件开发活动行管的内容。<br>之后提到了软件团队赚钱的方式。再从广义上的软件工程也包括用户体验、用户界面等。从而推出一个公式：软件＝程序＋软件工程。又从中扩展到软件企业＝软件＋商业模式。<br>用折纸飞机的玩具阶段、用氢气球飞上天的业余爱好阶段、莱特兄弟制造飞机的探索阶段、现在的航空业的成熟的产业阶段类比软件开发的不同阶段：<br><img src=\"/images/soft classify.png\" alt=\"Alt text\"><br>软件工程是把系统的、有序的、可量化的放大应用到软件的开发、运营和维护上的过程。介绍了软件工程包含了哪些领域以及与软件工程相关的一些领域。简单介绍了一下软件开发流程和一些工具。<br>软件的特殊性共总结了五点内容：</p>\n<ul>\n<li><strong>复杂性</strong></li>\n<li><strong>不可见性</strong></li>\n<li><strong>易变性</strong></li>\n<li><strong>服从性</strong></li>\n<li><strong>非连续性</strong><br>之后对软件工程和计算机科学之间的关系、侧重点和领域等做出比较。<br>最后谈了谈bug的来历。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在我看来就是造轮子和用轮子，作为java程序员想快速做出一个网站，不算是难事，即便用上SSM(Spring MVC,Spring,Mybatis)再加上基于RESTFul API的Swagger实现前后端分离的契约。还是加上缓存redis等技术对于数据结构和算法运用的不是很多基本上都是围绕着对数据库的增、删、改、查，这几个操作。肯定会有这个阶段，我们只需要会用轮子，还需要关注轮子是怎么造的嘛？在我看来数据结构和算法是一个编程员的基本功。所以基本功往往不是一时半会可以出效果的，如果不在乎这些基本功，也许一年两年在工作中不会体现，不过在这个领域呆的时间越久我确信，没有这些基本功作为保证，以后会遇见各种各样的瓶颈。</p>\n"},{"title":"构造之法第5章","date":"2017-03-20T04:58:41.000Z","_content":"## 第5章团队和流程概述\n- **理论和知识点**\n- **典型的软件团队模式和开发流程都有哪些？各有什么优缺点**\n- **MVP,MBP,RUP**\n- **练习与讨论**\n- **团队模式和开发效率的关系**\n讲了什么是非团队，和一些软件团队的模式：\n## 主治医师模式\n选取一个首席程序员，负责处理主要模型的设计和编码，其他人员负责配合和支持他／她。\n但是这种模式往往会从这一模式退化为“一个学生干活，其余学生跟着打酱油”。\n## 明星模式\n主治医师模式运用到极点，可以蜕化为明星模式，在这里，明星光环盖过了团队其他人的总和，但是这个明星万一哪天陨落了，这个团队是否可以正常运行。\n## 社区模式\n社区由很多志愿者参与，每个人参与自己感兴趣的项目，贡献力量，大部分人不拿报酬，发挥大众的力量但是，同时代码质量也要进行严格的控制。\n## 业余剧团模式\n这样的团队在每一个项目中，不同的人会挑选不同的角色。在下一个项目中这些人也许也会换一个完全不同的角色类型。各人在团队中听从一个中央指挥的指挥和安排。\n## 神秘团队\n一些软件项目在秘密状态下进行，别人不知道他们具体在做什么。这种模式好处是：团队内部有极大的自由，没有外界的干扰，团队成员有极大的投入。\n## 特工团队\n软件行业的一些团队由一些有特殊技能的专业人士组成，负责一些棘手的而有紧迫的问题。例如一些专门做网站安全性服务团队。\n## 交响乐团模式\n特点如下：\n- **工具齐全**\n- **各司其职**\n- **有统一的指挥**\n- **具有多个项目的的开发经验**\n## 爵士乐模式\n特点如下：\n- **工作比较随意**\n- **主要的程序员没有现场指挥**\n- **架构师搭建架构之后，程序员自由发挥**\n- **人数较少**\n强调个性化的表达，强有力的互动，对变化的内容有创意的回应。\n## 功能团队模式\n具备不同能力的同事平等协作，共同完成一个功能。他们之间没有管理和被管理的关系。\n## 官僚模式\n![Alt text](/images/guanliao.png)\n层层管理的官僚模式\n这种模式在软件开发中会出问题。因为成员之间不光有技术方面的合作和领导，同时还混进了组织上的领导和被领导关系。跨组织的合作变得比较困难，因为各自头顶上都有不同的老板。这种模式如果应用不好，最后会变成“老板驱动”的开发流程。\n## 开发流程\n我们在开发、运营、维护软件的过程中有很多技术、做法、习惯和思想。软件工程把这些相关的技术和过程统一到一个体系中，叫“软件开发流程”，软件开发流程的目的是为了提高软件开发、运营和维护的效率，以及提升用户满意度、软件的可靠性和可维护性。\n## 写了在改模式\n![Alt text](/images/xieafterupdate.png)\n这个流程也有好处，不需要太多其他准备或相关知识，大家上来就写代码，也许就能写出来，写不出来就改，也许能改好。当面临下面的任务时，也许这个方法是有用的。 “只用一次”的程序 “看过了就扔”的原型 一些不实用的演示程序 但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太大了。要注意的是，许多学校里的软件工程作业的要求符合上面那三点，所以难怪同学们觉得没有必要用其他的开发方法，“写了再改”足矣！\n## 瀑布模型\n当软件行业还在年幼的时期，它从别的成熟行业（硬件设计，建筑工程）借用了不少经验和模型。在那些“硬”的行业中，产品大多遵循 [分析→设计→实现（制造）→销售→维护] 这个流程。由于在“硬”行业中产品一旦大规模生产，要再返回去修改时就非常困难，甚至是不可能的。因此这个模型描述了单向的\n![Alt text](/images/waterfall.png)\n温斯顿正确地指出了在设计大型系统时，要做相邻步骤的回溯，解决上一阶段未能解决的问题:又如, 温斯顿指出,要让产品成功,最好把这个模型走两遍,先有一个模拟版本(Simulation of FinalProduct),在此基础上收集反馈,改进各个步骤,并交付一个最终的版本:\n![Alt text](/images/shouji.png)\n","source":"_posts/构造之法第5章.md","raw":"---\ntitle: 构造之法第5章\ndate: 2017-03-20 12:58:41\ntags:\n---\n## 第5章团队和流程概述\n- **理论和知识点**\n- **典型的软件团队模式和开发流程都有哪些？各有什么优缺点**\n- **MVP,MBP,RUP**\n- **练习与讨论**\n- **团队模式和开发效率的关系**\n讲了什么是非团队，和一些软件团队的模式：\n## 主治医师模式\n选取一个首席程序员，负责处理主要模型的设计和编码，其他人员负责配合和支持他／她。\n但是这种模式往往会从这一模式退化为“一个学生干活，其余学生跟着打酱油”。\n## 明星模式\n主治医师模式运用到极点，可以蜕化为明星模式，在这里，明星光环盖过了团队其他人的总和，但是这个明星万一哪天陨落了，这个团队是否可以正常运行。\n## 社区模式\n社区由很多志愿者参与，每个人参与自己感兴趣的项目，贡献力量，大部分人不拿报酬，发挥大众的力量但是，同时代码质量也要进行严格的控制。\n## 业余剧团模式\n这样的团队在每一个项目中，不同的人会挑选不同的角色。在下一个项目中这些人也许也会换一个完全不同的角色类型。各人在团队中听从一个中央指挥的指挥和安排。\n## 神秘团队\n一些软件项目在秘密状态下进行，别人不知道他们具体在做什么。这种模式好处是：团队内部有极大的自由，没有外界的干扰，团队成员有极大的投入。\n## 特工团队\n软件行业的一些团队由一些有特殊技能的专业人士组成，负责一些棘手的而有紧迫的问题。例如一些专门做网站安全性服务团队。\n## 交响乐团模式\n特点如下：\n- **工具齐全**\n- **各司其职**\n- **有统一的指挥**\n- **具有多个项目的的开发经验**\n## 爵士乐模式\n特点如下：\n- **工作比较随意**\n- **主要的程序员没有现场指挥**\n- **架构师搭建架构之后，程序员自由发挥**\n- **人数较少**\n强调个性化的表达，强有力的互动，对变化的内容有创意的回应。\n## 功能团队模式\n具备不同能力的同事平等协作，共同完成一个功能。他们之间没有管理和被管理的关系。\n## 官僚模式\n![Alt text](/images/guanliao.png)\n层层管理的官僚模式\n这种模式在软件开发中会出问题。因为成员之间不光有技术方面的合作和领导，同时还混进了组织上的领导和被领导关系。跨组织的合作变得比较困难，因为各自头顶上都有不同的老板。这种模式如果应用不好，最后会变成“老板驱动”的开发流程。\n## 开发流程\n我们在开发、运营、维护软件的过程中有很多技术、做法、习惯和思想。软件工程把这些相关的技术和过程统一到一个体系中，叫“软件开发流程”，软件开发流程的目的是为了提高软件开发、运营和维护的效率，以及提升用户满意度、软件的可靠性和可维护性。\n## 写了在改模式\n![Alt text](/images/xieafterupdate.png)\n这个流程也有好处，不需要太多其他准备或相关知识，大家上来就写代码，也许就能写出来，写不出来就改，也许能改好。当面临下面的任务时，也许这个方法是有用的。 “只用一次”的程序 “看过了就扔”的原型 一些不实用的演示程序 但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太大了。要注意的是，许多学校里的软件工程作业的要求符合上面那三点，所以难怪同学们觉得没有必要用其他的开发方法，“写了再改”足矣！\n## 瀑布模型\n当软件行业还在年幼的时期，它从别的成熟行业（硬件设计，建筑工程）借用了不少经验和模型。在那些“硬”的行业中，产品大多遵循 [分析→设计→实现（制造）→销售→维护] 这个流程。由于在“硬”行业中产品一旦大规模生产，要再返回去修改时就非常困难，甚至是不可能的。因此这个模型描述了单向的\n![Alt text](/images/waterfall.png)\n温斯顿正确地指出了在设计大型系统时，要做相邻步骤的回溯，解决上一阶段未能解决的问题:又如, 温斯顿指出,要让产品成功,最好把这个模型走两遍,先有一个模拟版本(Simulation of FinalProduct),在此基础上收集反馈,改进各个步骤,并交付一个最终的版本:\n![Alt text](/images/shouji.png)\n","slug":"构造之法第5章","published":1,"updated":"2017-03-20T07:13:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4nd000a6lu2w2rfxtef","content":"<h2 id=\"第5章团队和流程概述\"><a href=\"#第5章团队和流程概述\" class=\"headerlink\" title=\"第5章团队和流程概述\"></a>第5章团队和流程概述</h2><ul>\n<li><strong>理论和知识点</strong></li>\n<li><strong>典型的软件团队模式和开发流程都有哪些？各有什么优缺点</strong></li>\n<li><strong>MVP,MBP,RUP</strong></li>\n<li><strong>练习与讨论</strong></li>\n<li><strong>团队模式和开发效率的关系</strong><br>讲了什么是非团队，和一些软件团队的模式：<h2 id=\"主治医师模式\"><a href=\"#主治医师模式\" class=\"headerlink\" title=\"主治医师模式\"></a>主治医师模式</h2>选取一个首席程序员，负责处理主要模型的设计和编码，其他人员负责配合和支持他／她。<br>但是这种模式往往会从这一模式退化为“一个学生干活，其余学生跟着打酱油”。<h2 id=\"明星模式\"><a href=\"#明星模式\" class=\"headerlink\" title=\"明星模式\"></a>明星模式</h2>主治医师模式运用到极点，可以蜕化为明星模式，在这里，明星光环盖过了团队其他人的总和，但是这个明星万一哪天陨落了，这个团队是否可以正常运行。<h2 id=\"社区模式\"><a href=\"#社区模式\" class=\"headerlink\" title=\"社区模式\"></a>社区模式</h2>社区由很多志愿者参与，每个人参与自己感兴趣的项目，贡献力量，大部分人不拿报酬，发挥大众的力量但是，同时代码质量也要进行严格的控制。<h2 id=\"业余剧团模式\"><a href=\"#业余剧团模式\" class=\"headerlink\" title=\"业余剧团模式\"></a>业余剧团模式</h2>这样的团队在每一个项目中，不同的人会挑选不同的角色。在下一个项目中这些人也许也会换一个完全不同的角色类型。各人在团队中听从一个中央指挥的指挥和安排。<h2 id=\"神秘团队\"><a href=\"#神秘团队\" class=\"headerlink\" title=\"神秘团队\"></a>神秘团队</h2>一些软件项目在秘密状态下进行，别人不知道他们具体在做什么。这种模式好处是：团队内部有极大的自由，没有外界的干扰，团队成员有极大的投入。<h2 id=\"特工团队\"><a href=\"#特工团队\" class=\"headerlink\" title=\"特工团队\"></a>特工团队</h2>软件行业的一些团队由一些有特殊技能的专业人士组成，负责一些棘手的而有紧迫的问题。例如一些专门做网站安全性服务团队。<h2 id=\"交响乐团模式\"><a href=\"#交响乐团模式\" class=\"headerlink\" title=\"交响乐团模式\"></a>交响乐团模式</h2>特点如下：</li>\n<li><strong>工具齐全</strong></li>\n<li><strong>各司其职</strong></li>\n<li><strong>有统一的指挥</strong></li>\n<li><strong>具有多个项目的的开发经验</strong><h2 id=\"爵士乐模式\"><a href=\"#爵士乐模式\" class=\"headerlink\" title=\"爵士乐模式\"></a>爵士乐模式</h2>特点如下：</li>\n<li><strong>工作比较随意</strong></li>\n<li><strong>主要的程序员没有现场指挥</strong></li>\n<li><strong>架构师搭建架构之后，程序员自由发挥</strong></li>\n<li><strong>人数较少</strong><br>强调个性化的表达，强有力的互动，对变化的内容有创意的回应。<h2 id=\"功能团队模式\"><a href=\"#功能团队模式\" class=\"headerlink\" title=\"功能团队模式\"></a>功能团队模式</h2>具备不同能力的同事平等协作，共同完成一个功能。他们之间没有管理和被管理的关系。<h2 id=\"官僚模式\"><a href=\"#官僚模式\" class=\"headerlink\" title=\"官僚模式\"></a>官僚模式</h2><img src=\"/images/guanliao.png\" alt=\"Alt text\"><br>层层管理的官僚模式<br>这种模式在软件开发中会出问题。因为成员之间不光有技术方面的合作和领导，同时还混进了组织上的领导和被领导关系。跨组织的合作变得比较困难，因为各自头顶上都有不同的老板。这种模式如果应用不好，最后会变成“老板驱动”的开发流程。<h2 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h2>我们在开发、运营、维护软件的过程中有很多技术、做法、习惯和思想。软件工程把这些相关的技术和过程统一到一个体系中，叫“软件开发流程”，软件开发流程的目的是为了提高软件开发、运营和维护的效率，以及提升用户满意度、软件的可靠性和可维护性。<h2 id=\"写了在改模式\"><a href=\"#写了在改模式\" class=\"headerlink\" title=\"写了在改模式\"></a>写了在改模式</h2><img src=\"/images/xieafterupdate.png\" alt=\"Alt text\"><br>这个流程也有好处，不需要太多其他准备或相关知识，大家上来就写代码，也许就能写出来，写不出来就改，也许能改好。当面临下面的任务时，也许这个方法是有用的。 “只用一次”的程序 “看过了就扔”的原型 一些不实用的演示程序 但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太大了。要注意的是，许多学校里的软件工程作业的要求符合上面那三点，所以难怪同学们觉得没有必要用其他的开发方法，“写了再改”足矣！<h2 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h2>当软件行业还在年幼的时期，它从别的成熟行业（硬件设计，建筑工程）借用了不少经验和模型。在那些“硬”的行业中，产品大多遵循 [分析→设计→实现（制造）→销售→维护] 这个流程。由于在“硬”行业中产品一旦大规模生产，要再返回去修改时就非常困难，甚至是不可能的。因此这个模型描述了单向的<br><img src=\"/images/waterfall.png\" alt=\"Alt text\"><br>温斯顿正确地指出了在设计大型系统时，要做相邻步骤的回溯，解决上一阶段未能解决的问题:又如, 温斯顿指出,要让产品成功,最好把这个模型走两遍,先有一个模拟版本(Simulation of FinalProduct),在此基础上收集反馈,改进各个步骤,并交付一个最终的版本:<br><img src=\"/images/shouji.png\" alt=\"Alt text\"></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第5章团队和流程概述\"><a href=\"#第5章团队和流程概述\" class=\"headerlink\" title=\"第5章团队和流程概述\"></a>第5章团队和流程概述</h2><ul>\n<li><strong>理论和知识点</strong></li>\n<li><strong>典型的软件团队模式和开发流程都有哪些？各有什么优缺点</strong></li>\n<li><strong>MVP,MBP,RUP</strong></li>\n<li><strong>练习与讨论</strong></li>\n<li><strong>团队模式和开发效率的关系</strong><br>讲了什么是非团队，和一些软件团队的模式：<h2 id=\"主治医师模式\"><a href=\"#主治医师模式\" class=\"headerlink\" title=\"主治医师模式\"></a>主治医师模式</h2>选取一个首席程序员，负责处理主要模型的设计和编码，其他人员负责配合和支持他／她。<br>但是这种模式往往会从这一模式退化为“一个学生干活，其余学生跟着打酱油”。<h2 id=\"明星模式\"><a href=\"#明星模式\" class=\"headerlink\" title=\"明星模式\"></a>明星模式</h2>主治医师模式运用到极点，可以蜕化为明星模式，在这里，明星光环盖过了团队其他人的总和，但是这个明星万一哪天陨落了，这个团队是否可以正常运行。<h2 id=\"社区模式\"><a href=\"#社区模式\" class=\"headerlink\" title=\"社区模式\"></a>社区模式</h2>社区由很多志愿者参与，每个人参与自己感兴趣的项目，贡献力量，大部分人不拿报酬，发挥大众的力量但是，同时代码质量也要进行严格的控制。<h2 id=\"业余剧团模式\"><a href=\"#业余剧团模式\" class=\"headerlink\" title=\"业余剧团模式\"></a>业余剧团模式</h2>这样的团队在每一个项目中，不同的人会挑选不同的角色。在下一个项目中这些人也许也会换一个完全不同的角色类型。各人在团队中听从一个中央指挥的指挥和安排。<h2 id=\"神秘团队\"><a href=\"#神秘团队\" class=\"headerlink\" title=\"神秘团队\"></a>神秘团队</h2>一些软件项目在秘密状态下进行，别人不知道他们具体在做什么。这种模式好处是：团队内部有极大的自由，没有外界的干扰，团队成员有极大的投入。<h2 id=\"特工团队\"><a href=\"#特工团队\" class=\"headerlink\" title=\"特工团队\"></a>特工团队</h2>软件行业的一些团队由一些有特殊技能的专业人士组成，负责一些棘手的而有紧迫的问题。例如一些专门做网站安全性服务团队。<h2 id=\"交响乐团模式\"><a href=\"#交响乐团模式\" class=\"headerlink\" title=\"交响乐团模式\"></a>交响乐团模式</h2>特点如下：</li>\n<li><strong>工具齐全</strong></li>\n<li><strong>各司其职</strong></li>\n<li><strong>有统一的指挥</strong></li>\n<li><strong>具有多个项目的的开发经验</strong><h2 id=\"爵士乐模式\"><a href=\"#爵士乐模式\" class=\"headerlink\" title=\"爵士乐模式\"></a>爵士乐模式</h2>特点如下：</li>\n<li><strong>工作比较随意</strong></li>\n<li><strong>主要的程序员没有现场指挥</strong></li>\n<li><strong>架构师搭建架构之后，程序员自由发挥</strong></li>\n<li><strong>人数较少</strong><br>强调个性化的表达，强有力的互动，对变化的内容有创意的回应。<h2 id=\"功能团队模式\"><a href=\"#功能团队模式\" class=\"headerlink\" title=\"功能团队模式\"></a>功能团队模式</h2>具备不同能力的同事平等协作，共同完成一个功能。他们之间没有管理和被管理的关系。<h2 id=\"官僚模式\"><a href=\"#官僚模式\" class=\"headerlink\" title=\"官僚模式\"></a>官僚模式</h2><img src=\"/images/guanliao.png\" alt=\"Alt text\"><br>层层管理的官僚模式<br>这种模式在软件开发中会出问题。因为成员之间不光有技术方面的合作和领导，同时还混进了组织上的领导和被领导关系。跨组织的合作变得比较困难，因为各自头顶上都有不同的老板。这种模式如果应用不好，最后会变成“老板驱动”的开发流程。<h2 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h2>我们在开发、运营、维护软件的过程中有很多技术、做法、习惯和思想。软件工程把这些相关的技术和过程统一到一个体系中，叫“软件开发流程”，软件开发流程的目的是为了提高软件开发、运营和维护的效率，以及提升用户满意度、软件的可靠性和可维护性。<h2 id=\"写了在改模式\"><a href=\"#写了在改模式\" class=\"headerlink\" title=\"写了在改模式\"></a>写了在改模式</h2><img src=\"/images/xieafterupdate.png\" alt=\"Alt text\"><br>这个流程也有好处，不需要太多其他准备或相关知识，大家上来就写代码，也许就能写出来，写不出来就改，也许能改好。当面临下面的任务时，也许这个方法是有用的。 “只用一次”的程序 “看过了就扔”的原型 一些不实用的演示程序 但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太但是，要写一个有实际用户、解决实际需求的软件，这个方法的缺点就太大了。要注意的是，许多学校里的软件工程作业的要求符合上面那三点，所以难怪同学们觉得没有必要用其他的开发方法，“写了再改”足矣！<h2 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h2>当软件行业还在年幼的时期，它从别的成熟行业（硬件设计，建筑工程）借用了不少经验和模型。在那些“硬”的行业中，产品大多遵循 [分析→设计→实现（制造）→销售→维护] 这个流程。由于在“硬”行业中产品一旦大规模生产，要再返回去修改时就非常困难，甚至是不可能的。因此这个模型描述了单向的<br><img src=\"/images/waterfall.png\" alt=\"Alt text\"><br>温斯顿正确地指出了在设计大型系统时，要做相邻步骤的回溯，解决上一阶段未能解决的问题:又如, 温斯顿指出,要让产品成功,最好把这个模型走两遍,先有一个模拟版本(Simulation of FinalProduct),在此基础上收集反馈,改进各个步骤,并交付一个最终的版本:<br><img src=\"/images/shouji.png\" alt=\"Alt text\"></li>\n</ul>\n"},{"title":"构造之法第2章","date":"2017-03-20T04:02:21.000Z","_content":"## 第2章概论\n这一章是讲自身技术的，首先讲到了单元测试，书中说：最好是在设计的时候就写好评单元测试，这样单元测试就能体现API的语义。还提到效能分析工具，从时间复杂度和空间复杂度来判定效能。提到了个人的开发流程，从在校大学生和硕士毕业后工作三年后的个人工作流程进行对比发现后者花在编码阶段的时间大大减少和花在需求分析和软件测试阶段的时间增加了，并且这两者占到了整个开发流程的60%。最后是实践还有更加详细的讲到了回归测试，回归简单的来说就是已经做好的模块，并且单元测试做的也没有问题，结果引入新的模块后出现了老得的模块的问题叫做回归。\n\n## 总结\n我作为在校大三的学生，也是会遇到过类似的问题。老师让做一个课程设计，用java写一个ATM，我当时觉得自己java学的不错（在我们班而言）就迫不及待的就直接编码了。当时什么架构也都不知道，也没有学软件工程，也不清楚个人的开发流程是什么，直接上来就编码。作了可能有一半了发现发现自己写的程序不符合面向对象的要求，也不符合MVC架构的准则。就重新写了一遍，写完之后发现，代码清清爽爽。这也算自己或者大多数，学编程初期的人都会遇到的一个问题吧。现在如果说做一个软件，我估计会强忍着，一上来就去写代码的冲动好好的把需求分析一下，数据库设计一下，功能梳理一下。说实话，第2章是关于测试的，本身来说对测试兴趣不是很高，所以，只是粗略的看了一下，但并不是测试不重要，只是个人感觉兴趣不大。\n","source":"_posts/构造之法第2章.md","raw":"---\ntitle: 构造之法第2章\ndate: 2017-03-20 12:02:21\ntags:\n---\n## 第2章概论\n这一章是讲自身技术的，首先讲到了单元测试，书中说：最好是在设计的时候就写好评单元测试，这样单元测试就能体现API的语义。还提到效能分析工具，从时间复杂度和空间复杂度来判定效能。提到了个人的开发流程，从在校大学生和硕士毕业后工作三年后的个人工作流程进行对比发现后者花在编码阶段的时间大大减少和花在需求分析和软件测试阶段的时间增加了，并且这两者占到了整个开发流程的60%。最后是实践还有更加详细的讲到了回归测试，回归简单的来说就是已经做好的模块，并且单元测试做的也没有问题，结果引入新的模块后出现了老得的模块的问题叫做回归。\n\n## 总结\n我作为在校大三的学生，也是会遇到过类似的问题。老师让做一个课程设计，用java写一个ATM，我当时觉得自己java学的不错（在我们班而言）就迫不及待的就直接编码了。当时什么架构也都不知道，也没有学软件工程，也不清楚个人的开发流程是什么，直接上来就编码。作了可能有一半了发现发现自己写的程序不符合面向对象的要求，也不符合MVC架构的准则。就重新写了一遍，写完之后发现，代码清清爽爽。这也算自己或者大多数，学编程初期的人都会遇到的一个问题吧。现在如果说做一个软件，我估计会强忍着，一上来就去写代码的冲动好好的把需求分析一下，数据库设计一下，功能梳理一下。说实话，第2章是关于测试的，本身来说对测试兴趣不是很高，所以，只是粗略的看了一下，但并不是测试不重要，只是个人感觉兴趣不大。\n","slug":"构造之法第2章","published":1,"updated":"2017-03-20T04:23:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4ne000b6lu2f59dzsx5","content":"<h2 id=\"第2章概论\"><a href=\"#第2章概论\" class=\"headerlink\" title=\"第2章概论\"></a>第2章概论</h2><p>这一章是讲自身技术的，首先讲到了单元测试，书中说：最好是在设计的时候就写好评单元测试，这样单元测试就能体现API的语义。还提到效能分析工具，从时间复杂度和空间复杂度来判定效能。提到了个人的开发流程，从在校大学生和硕士毕业后工作三年后的个人工作流程进行对比发现后者花在编码阶段的时间大大减少和花在需求分析和软件测试阶段的时间增加了，并且这两者占到了整个开发流程的60%。最后是实践还有更加详细的讲到了回归测试，回归简单的来说就是已经做好的模块，并且单元测试做的也没有问题，结果引入新的模块后出现了老得的模块的问题叫做回归。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我作为在校大三的学生，也是会遇到过类似的问题。老师让做一个课程设计，用java写一个ATM，我当时觉得自己java学的不错（在我们班而言）就迫不及待的就直接编码了。当时什么架构也都不知道，也没有学软件工程，也不清楚个人的开发流程是什么，直接上来就编码。作了可能有一半了发现发现自己写的程序不符合面向对象的要求，也不符合MVC架构的准则。就重新写了一遍，写完之后发现，代码清清爽爽。这也算自己或者大多数，学编程初期的人都会遇到的一个问题吧。现在如果说做一个软件，我估计会强忍着，一上来就去写代码的冲动好好的把需求分析一下，数据库设计一下，功能梳理一下。说实话，第2章是关于测试的，本身来说对测试兴趣不是很高，所以，只是粗略的看了一下，但并不是测试不重要，只是个人感觉兴趣不大。</p>\n","excerpt":"","more":"<h2 id=\"第2章概论\"><a href=\"#第2章概论\" class=\"headerlink\" title=\"第2章概论\"></a>第2章概论</h2><p>这一章是讲自身技术的，首先讲到了单元测试，书中说：最好是在设计的时候就写好评单元测试，这样单元测试就能体现API的语义。还提到效能分析工具，从时间复杂度和空间复杂度来判定效能。提到了个人的开发流程，从在校大学生和硕士毕业后工作三年后的个人工作流程进行对比发现后者花在编码阶段的时间大大减少和花在需求分析和软件测试阶段的时间增加了，并且这两者占到了整个开发流程的60%。最后是实践还有更加详细的讲到了回归测试，回归简单的来说就是已经做好的模块，并且单元测试做的也没有问题，结果引入新的模块后出现了老得的模块的问题叫做回归。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我作为在校大三的学生，也是会遇到过类似的问题。老师让做一个课程设计，用java写一个ATM，我当时觉得自己java学的不错（在我们班而言）就迫不及待的就直接编码了。当时什么架构也都不知道，也没有学软件工程，也不清楚个人的开发流程是什么，直接上来就编码。作了可能有一半了发现发现自己写的程序不符合面向对象的要求，也不符合MVC架构的准则。就重新写了一遍，写完之后发现，代码清清爽爽。这也算自己或者大多数，学编程初期的人都会遇到的一个问题吧。现在如果说做一个软件，我估计会强忍着，一上来就去写代码的冲动好好的把需求分析一下，数据库设计一下，功能梳理一下。说实话，第2章是关于测试的，本身来说对测试兴趣不是很高，所以，只是粗略的看了一下，但并不是测试不重要，只是个人感觉兴趣不大。</p>\n"},{"title":"Markdown简介","date":"2017-03-19T06:14:37.000Z","_content":"## Markdown简介\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按`Cmd + /`查看帮助。\n","source":"_posts/文章测试.md","raw":"---\ntitle: Markdown简介\ndate: 2017-03-19 14:14:37\ntags:\n---\n## Markdown简介\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按`Cmd + /`查看帮助。\n","slug":"文章测试","published":1,"updated":"2017-03-19T08:52:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1etf4ne000c6lu2jnc8kp68","content":"<h2 id=\"Markdown简介\"><a href=\"#Markdown简介\" class=\"headerlink\" title=\"Markdown简介\"></a>Markdown简介</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">维基百科</a></p>\n</blockquote>\n<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.example.com\" target=\"_blank\" rel=\"external\">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。</p>\n","excerpt":"","more":"<h2 id=\"Markdown简介\"><a href=\"#Markdown简介\" class=\"headerlink\" title=\"Markdown简介\"></a>Markdown简介</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\">维基百科</a></p>\n</blockquote>\n<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.example.com\">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}